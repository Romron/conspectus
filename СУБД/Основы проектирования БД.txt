
Источники:
   https://habr.com/ru/post/514364/

Термины:
   База данных (БД) это 
      совокупность данных упорядоченных в определённой структуре (по определённой системе)
   Система управления БД это
      програмное обеспечение, интерфейс, предназначенное для управления БД
   Нереляционные типы баз данных, NoSQL,  
      база данных, в которой НЕ используется табличная схема строк и столбцов.
      модель хранения, оптимизированная под конкретные требования типа хранимых данных. 
            пример
               данные могут храниться как 
                  пары "ключ — значение", 
                  документы JSON 
                  граф, состоящий из ребер и вершин
      Приимущества
         Гибкость
            что позволяет осуществлять разработку быстрее и обеспечивает возможность поэтапной реализации
            хорошо подходят для частично структурированных и неструктурированных данных
         Масштабируемость
               реализуется с использованием распределенных кластеров аппаратного обеспечения
               а не путем добавления дорогих надежных серверов
         Высокая производительность
            т.к. оптимизированы для конкретных моделей данных и шаблонов доступа
         Широкие функциональные возможности
            предоставляют API и типы данных с широкой функциональностью
            которые специально разработаны для соответствующих моделей данных.
   Реляционные базы данных это
      Реляционные = табличные
      когда записи «нормализуется» т.е. разделяется на несколько частей 
      которые хранится в отдельных таблицах
      отношения между таблицами определяются ограничениями первичных и внешних ключей
   Прервичный ключ
      явно и однозначно определяет конкретную запись в таблице
      в таблице не может быть двух записей с одинаковым первичным ключём
      Виды по типу
         логический -- естественный 
            в качестве ключа используется значение одного из атребутов
               пример:  серия и номер паспорта
         сурогатный -- искуственный
            используется тогда когда естественный выделить в записях не удаётся
               пример:  порядковый номер или id
      Виды по составу
         простой -- один атребут: артикул
         составной -- несколько атребутов: серия и номер паспорта 
   Внешний ключ   
      устанавливает связь между таблицами
      в реляционнй базе данных это единственный способ установить связь между таблицами
      устанавливается для столбцов из зависимай, подченённой, таблицы и указывает на один из столбцов главной таблицы
      как правило
         внешний ключ указывает на первичный ключ главной таблицы
   Поля или атребуты это   
      столбцы таблицы БД
      все значения в одном столбце имеют один тип данных
      столбцы распологаются в строго определённом порядке
      в таблице должен быть хотябы один столбец
   Строки = кортежи = записи
      распологаются в произвольном порядке
      строк в таблице может не быть
   Результат запроса к базе данных
       всегда возвращает таблицу
       одинаковые запросы двух разных запросов можно объединить в одну таблицу
       можно использовать в качестве предмета для последующих запросов
   Модель создаётся таким образом, чтобы 
      обеспечить целостность ссылочных данных между таблицами в базе данных. 
      данные нормализованы для снижения избыточности и в целом оптимизированы для хранения
   Модель (схема) базы данных — это 
      «снимок» отношений между сущностями в определенный момент времени
      Хорошо спроектированную модель базы данных 
         с учетом изменения отношений в реальности или в предметной области 
         не понадобится менять годами или даже десятилетия. 
         Это особенно важно для хранилищ данных, 
            где изменения влекут пересохранение больших объемов данных 
   Таблицы в реляционной модели — это сущности
   Связи между таблицами -- отношения сущьностей выражаются в форме ключей
   Строки таблиц — это экземпляры сущьностей. Но чтобы было проще, под таблицами часто понимаются сущности, а под строками таблицы — экземпляры сущностей. Их отношения выражаются через связи в форме внешних ключей.
   Целостность БД 
      соответствие данных, информации, внутренней логике, стуктуре, заданным правилам БД
   Ограничение целостности 
      правило устанавливаюшее ограничения на возможное состояние БД
      т.е. правила определяющие корректность информации добавляемой в БД 
         пример:
            вес, возраст, объём и т.п. не могут быть отрецательными


Формальные правила сформулированные по функционалу          
   !!! Суть всех правил:
      нормализация 
         усложнение структуры базы данных т.е. дробление сущностей 
         удаление избыточности данных
         в результате
         уменьшение повторяемости хранения информации
         меньшение возможности появления аномалий в данных
         усложнение запросов для манипуляций с данными (вставки, модификации, выборки и удаления)
      денормализация это
         упрощение структуры базы данных т.е. укрупнение сущностей
         позволяет упростить построения запросов доступа к данным 
   отношения были не придуманы, а ВЫЯВЛЕНЫ !!!
      т.е. любые взаимо связанные данные всегда будеут находится в одном из описанных отноошений
   эти отношения могут меняться преобразовываясь из одного вида в другой и обратно
   отношение один к одному
      с обязательной связью:
         пример
            гражданин и его паспорт
               у любого гражданина должен быть паспорт -->  паспорт один для каждого гражданина
         способ реализации
            в одной сущности (таблице)
               таблица представляет собой сущность гражданина
               а атрибут (поле) PassportData содержит все паспортные данные гражданина и не может быть пустым
            в двух разных сущностях (таблицах)
               таблица представляет собой сущность гражданина
                  а таблица PassportData — сущность паспортных данных гражданина (самого паспорта)
               сущность гражданина содержит атрибут (поле) PassportID, 
                  который ссылается на первичный ключ таблицы PassportData. 
               В свою очередь сущность паспортных данных содержит атрибут (поле) CitizenID
                  которое ссылается на первичный ключ CitizenID таблицы Citizen. 
               Поле PassportID таблицы Citizen не может быть пустым (NOT NULL). 
               Важно поддерживать целостность поля CitizenID таблицы PassportData чтобы обеспечить связь один к одному. 
                  т.е. 
                     поле PassportID таблицы Citizen и 
                     поле CitizenID таблицы PassportData 
                        должны ссылаться на одни и те же записи 
                        !!!   как если бы это была одна сущность (таблица), 
                        представленная в первом способе "одной сущности"
                  по сути способ "в двух разных сущностях" это способ 
                     распределить одну сущиность по разным локациям
                     этих локаций мажет быть больше двух (!?)
      с необязательной связью:
         пример
            человек, имеющий или не имеющий паспорт конкретной страны
            В первом случае 
               он будет являться гражданином рассматриваемой страны, 
            во втором — нет.
         способ реализации
            в одной сущности (таблице)
               Таблица Person представляет собой сущность человека
               атрибут (поле) PassportData содержит все его паспортные данные и МОЖЕТ быть пустым (NULL)
            в двух сущностях (таблицах)
               Таблица Person представляет собой сущность человека
                  сущность человека содержит атрибут (поле) PassportID, 
                  который ссылается на первичный ключ таблицы PassportData. 
               таблица PassportData — сущность паспортных данных человека (самого паспорта)
                  сущность паспортных данных содержит атрибут (поле) PersonID, 
                  которое ссылается на первичный ключ PersonID таблицы Person. 
                  поле PassportID таблицы Person может быть пустым (NULL). 
               Также важно поддерживать целостность поля PersonID таблицы PassportData. 
                  Это нужно, чтобы обеспечить связь один к одному. 
               Поле PassportID таблицы Person и поле PersonID таблицы PassportData 
                  должны ссылаться на одни и те же записи 
                  как если бы это была одна сущность (таблица) показанная в предидущем способе 
                  но т.к. связь не обязательна то 
                     данные поля могут неопределенными, то есть, содержать NULL.
   отношение один ко многим
      с обязательной связью
         пример
            родитель и его дети
            у каждого родителя есть как минимум один ребенок
         способ реализации
            в одной сущности (таблице)
               Таблица Parent представляет сущность родителя
               атрибут (поле) ChildList содержит информацию о детях
                  данное поле не может быть пустым (NOT NULL). 
               обычно типом поля ChildList выступают неполно структурированные данные 
                  (NoSQL) такие как XML, JSON и т д.
            в двух сущностях (таблицах)
               таблица Parent представляет сущность родителя
               таблица Child — сущность ребенка. 
               У таблицы Child есть поле ParentID
                  который ссылается на первичный ключ ParentID таблицы Parent
                  поле ParentID таблицы Child не может быть пустым (NOT NULL)
      с необязательной связь 
         пример
            человек, у которого могут быть дети или их может не быть   
         способ реализации
            в одной сущности
               таблица Parent представляет сущность родителя
               атрибут (поле) ChildList содержит информацию о детях
               данное поле может быть пустым (NULL)
               Обычно типом поля ChildList выступают неполно структурированные данные 
                  (NoSQL) такие как XML, JSON и т д.
            в одной сущности со ссылкой на саму себя
               при условии
                  что у сущностей (таблиц) родителя и ребенка 
                  будут одинаковые наборы атрибутов (полей) без учета ссылки на родителя:
               сущность (таблица) Person содержит атрибут (поле) ParentID, 
                  который ссылается на первичный ключ PersonID 
                  этой же таблицы Person 
                  и может содержать пустое значение (NULL).
               данная реализация является примером реализации отношения «многие к одному» 
               с необязательной связью
            в двух сущностях (таблицах):
               таблица Parent представляет сущность родителя
               таблица Child — сущность ребенка
               у таблицы Child есть поле ParentID, ссылающееся на первичный ключ ParentID таблицы Parent
               Поле ParentID таблицы Child может быть пустым (NULL).
   отношение многие к одному
      Эту связь можно рассмотреть зеркально 
      к приведенной выше связи один ко многим. 
         т.е. отношение сущности «дети» к сущности «родители»
            где обязательная связь будет при условии, 
            что у ребенка есть хотя бы один родитель. 
      Если же участвуют все дети, в том числе и находящиеся в детских домах, 
      отношение будет с необязательной связью.
   отношение многие ко многим
      Пример
         недвижимость: она может быть в собственности как одного человека, так и нескольких. 
         С другой стороны, один человек может владеть несколькими домами или долями нескольких домов.
      способ реализации
         с привлечением NoSQL, можно так же, как в описанных выше отношениях. 
         рамках реляционной модели обычно такое отношение реализуют 
            через 3 сущности (таблицы):
               таблицы Person и RealEstate представляют соответственно сущности человека и недвижимости. 
               Связываются данные сущности (таблицы) через сущность (таблицы) PersonRealEstate
               Атрибуты (поля) PersonID и RealEstateID ссылаются на 
                  первичные ключи PersonID таблицы Person 
                  RealEstateID таблицы RealEstate 
               Обратите внимание
                  для таблицы PersonRealEstate пара (PersonID; RealEstateID) 
                     всегда является уникальной и потому может выступать первичный ключем 
                     для самой связующей сущности PersonRealEstate.
            через более чем 3 сущности
               для этого добавляются нужные атрибуты, которые ссылаются 
               на первичные ключи необходимых соответствующих сущностей
                  по сути получим
                     множества отношений один к одному 
                        с обязательной связью в двух разных сущностях (таблицах)
                        с необязательной связью в двух сущностях (таблицах)
                     но объединённое под "управлением" одной таблицы

Этапы проэктирования
   исходя из функциональных потребностей
      управления
      представления
         фильтра и т.д.
      анализ
         статистика
   определить сущности
      элементы данных необходимые для использования или обработки данных
   определить отношения

ER-диаграмма
   Определение
      Схема «сущность-связь» (также ERD или ER-диаграмма) — это разновидность блок-схемы, 
      где показано, как разные «сущности» связаны между собой внутри системы. 
   устроены по тому же принципу, что и грамматические структуры: 
      сущности выполняют роль существительных, а связи — глаголов.
   уровней детализации
      Концептуальная модель данных — схема наивысшего уровня с минимальным количеством подробностей
         отображает общую структуру модели и всю архитектуру системы
      Логическая модель данных содержит более подробную информацию, нежели концептуальная модель. 
         Логическая модель не зависит от технологии, в которой она будет применяться.
      Физическая модель данных: составляется на основе логической модели  
         содержит достаточно технических подробностей для составления и внедрения самой базы данных

