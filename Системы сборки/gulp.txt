Источники:
   Лаврик Д noname tracker

Термины:

Смежные области:
   node.js



----------------------- ТЕОРИЯ start -----------------------  

   gulp.task('task_name', function(){ });
      метод класса gulp который запускает модули которые возвращают промисы


----------------------- ТЕОРИЯ end ------------------------- 


----------------------- Практика start ---------------------
Алгоритм использования:
   становить на каспьютер node, npm nvm - желательно
   установить глобально:
      gulp-cli    интерфейс командной строки для запуска тасков галпа из gulpfile.js
         npm gulp-cli -g
   в папке проэкта 
      npm init 
         ускоренная установка дабавить -y ответить на все вопросы да
      npm i gulp -D
Модули 
   необходимые 
      nod del  i -D 
   нужные для разроботки
      nod gulp-concat  i -D     // соединяет указанные css файлы в алфовитном порядке(!) в один по этому нужно передавать масив соединяемых файлов в определённом порядке
      nod gulp-autoprefixer i -D
         настойка    см docs
            задать процент использования браузера    "browsersList":">0,5";
               либо в обдельном файле
               либо в package.json в ключе browsersList 
      nod gulp-cleanCSS i -D     // минимизирует и оптимизирует CSS код
         настройка 
            задаётся уравень оптимизации  рекомендуется думул 1
      npm gulp-sourcemaps i -D      // генерирует карту по которой соотносятся исходные и минимизированные файлы
   необходимые для продакшина

Запуск обработки проэкта
   gulp           // запустит task с именем default  
   gulp task_nema 

Стандартная структура проэкта
   build
   src
      css
      img
      fonts
      scripts
      index.html
   gulpfile.js
Базовыя конфигурация gulp для вёрстки   в файле gulpfile.js
   const gulp = require('gulp');
   const del = require('del');
   const concat = require('gulp-concat');
   const autoprefixer = require('gulp-autoprefixer');
   const cleanCSS = require('gulp-clean-CSS');
   const sourcemaps = require('gulp-sourcemaps');

   function clean(){
      return del('./build/*');
   }

   function name_func(){
      return gulp.src('path_to_file(s)')     // т.к. методы галпа возвращают промисы return обязательно
         .pipe(sourcemaps.init())      // // обязательно до всех преобразований
         .pipe(concat('arr_concat_files, main.css'))
         .pipe(autoprefixer())
         .pipe(cleanCSS({
            leve:1
         }))
         
         .pipe(sourcemaps.write(map_file))     // обязательно после всех преобразований  map_file - фаил с картой указывать необязательно
         .pipe(gulp.best('./build'))
   }

   let assemble = gulp.parallel(task_nema_1, task_nema_2, task_nema_3, task_nema_4);      // собрать проэкт задействуя все манипуляции с файлами
   let build = gulp.series(clean,assemble);     // удалить файлы прошлой сборки выполнить новую сборку



   gulp.task('build', build);
   gulp.task('assemble', assemble);

Команды, методы, gulp 
   gulp.src('path_to_file(s)')      // формирует поток данных. Попрасту перемещает файлы из указанного места   возвращает промис
   .pipe(gulp_comand)     // регестрирует действие над данными в потоке    возвращает промис
   gulp.best('./build')    // устанавльвает место назначение перемещаемых данных для того что бы сбереч структуру вложенных папок указать только корневой каталог
   gulp.task('task_nema', name_func);      // регестрирует задачи которые будут вызыватся из командной строки
   gulp.parallel(task_nema_1, task_nema_2, task_nema_3, task_nema_4);      // запускает все задачи паралельно
      

Маски именования файлов
   *.html
   **/*.html   во всех вложенных папках

Заметки
   обрабатываются толька те файлы каторые перемещаются
Нельзя:
   называть папку для установки GULP называть GULP или так как называются модули галпа
----------------------- Практика end -----------------------



----------------------- Проблемы -- решения start ---------

----------------------- Проблемы -- решения end -----------








----------------------- ЧЕРНОВИК -----------------------








