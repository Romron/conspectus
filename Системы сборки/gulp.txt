Источники:
   Лаврик Д noname tracker

Термины:

Смежные области:
   node.js



----------------------- ТЕОРИЯ start -----------------------  

   gulp.task('task_name', function(){ });
      метод класса gulp который запускает модули которые возвращают промисы


----------------------- ТЕОРИЯ end ------------------------- 


----------------------- Практика start ---------------------
Алгоритм использования:
   становить на каспьютер node, npm nvm - желательно
   установить глобально:
      gulp-cli    интерфейс командной строки для запуска тасков галпа из gulpfile.js
         npm gulp-cli -g
   в папке проэкта 
      npm init 
         ускоренная установка дабавить -y ответить на все вопросы да
      npm i gulp -D
Модули 
   необходимые 
      nod del  i -D 
   нужные для разроботки
      nod gulp-concat  i -D     // соединяет указанные css файлы в алфовитном порядке(!) в один по этому нужно передавать масив соединяемых файлов в определённом порядке
      nod gulp-autoprefixer i -D
         настойка    см docs
            задать процент использования браузера    "browsersList":">0,5";
               либо в обдельном файле
               либо в package.json в ключе browsersList 
      nod gulp-cleanCSS i -D     // минимизирует и оптимизирует CSS код
         настройка 
            задаётся уравень оптимизации  рекомендуется думул 1
      npm gulp-sourcemaps i -D      // генерирует карту по которой соотносятся исходные и минимизированные файлы
      npm browser-sync i -D
      npm gulp-if i -D     // для условного управления потоком данных т.е. pipe будет выполнятся только когда первый параметр true 
   необходимые для продакшина
Стандартная структура проэкта
   build
   src
      css
      img
      fonts
      scripts
      index.html
   gulpfile.js
Минимальная базовыя конфигурация gulp для вёрстки   в файле gulpfile.js
   /*
      Для начала сборки проэкта
         режим разработки  gulp start
         режим готового продукта  gulp start --prod
   
   */
   
   const gulp = require('gulp');
   const del = require('del');
   const concat = require('gulp-concat');
   const autoprefixer = require('gulp-autoprefixer');
   const cleanCSS = require('gulp-clean-CSS');
   const sourcemaps = require('gulp-sourcemaps');
   const browserSync = require('browser-sync').create();
   const gulpif = require('gulp-if');

   const isDev = !isProd;     // всегда противоположно isProd   
   const isProd = process.argv.includes('--prod');    // теперь если в консоли вводить любую команду с флагом --prod isProd будет true иначе false   

   function clean(){
      return del('./build/*');
   }

   function html(){
      return gulp.src('./src/**/*.html')     // т.к. методы галпа возвращают промисы return обязательно

         что то 

         .pipe(gulp.best('./build')
         .pipe(browserSync.stream())      // отслеживает изменение файлов
         )
   }

   function styles(){
      return gulp.src('./src/css/**/*.css')     // т.к. методы галпа возвращают промисы return обязательно
         .pipe(gulpif(isDev, sourcemaps.init()))      // // обязательно до всех преобразований
         .pipe(concat('arr_concat_files, main.css'))
         .pipe(autoprefixer())
         .pipe(gulpif(isProd, cleanCSS({ leve:1 })))


         .pipe(gulpif(isDev, sourcemaps.write(map_file)))     // обязательно после всех преобразований  map_file - фаил с картой указывать необязательно
         .pipe(gulp.best('./build')
         .pipe(gulpif(isDev, browserSync.stream()))      // отслеживает изменение файлов
         )
   }

   function watch(){
      browserSync.init({
        server: {
                  baseDir: "./build/"     // корневая папка сервера
            }
         });
      gulp.watch(''./src/**/*.*'', function styles())
   }

   let assemble = gulp.parallel(task_scc, task_html, task_nema_3, task_nema_4);      // собрать проэкт задействуя все манипуляции с файлами
   let build = gulp.series(clean,assemble);     // удалить файлы прошлой сборки выполнить новую сборку
   let start = gulp.series(build,watch); 

   gulp.task('dev', watch);
   gulp.task('build', build);
   gulp.task('assemble', assemble);
Команды, методы, gulp 
   gulp.src('path_to_file(s)')      // формирует поток данных. Попрасту перемещает файлы из указанного места   возвращает промис
   .pipe(gulp_comand)     // регестрирует действие над данными в потоке    возвращает промис
   gulp.best('./build')    // устанавльвает место назначение перемещаемых данных для того что бы сбереч структуру вложенных папок указать только корневой каталог
   gulp.task('task_nema', name_func);      // регестрирует задачи которые будут вызыватся из командной строки
   gulp.parallel(task_nema_1, task_nema_2, task_nema_3, task_nema_4);      // запускает все задачи паралельно
Флаги команд консоли
   вся информация о текущем node процесе в пепеменной process        https://nodejs.org/docs/latest/api/process.html#processargv
      process.argv возвращает массив, содержащий аргументы командной строки, переданные при запуске процесса Node.js
         console.log(process.argv);
   предустановленные 
   кастомные
      устновить свой флаг любой команде в консоли     process.argv.includes('--my_flag');

Запуск обработки проэкта
   непосредственно галпом
      gulp           // запустит task с именем default  
      gulp task_nema 
   скриптом npm   используется в тех случиях когда команда запуска gulp слишком длинная например много ключей
      в файле package.json
         "scripts" : {
            "script_name" : "любой код для выполнения в консоли",
            "dev" : "gulp start", 
            "prod" : "gulp start --prod",
         }
         npm run script_name

Маски именования файлов
   *.html
   **/*.html   во всех вложенных папках

Заметки
   обрабатываются только те файлы каторые перемещаются
Нельзя:
   называть папку для установки GULP называть GULP или так как называются модули галпа
----------------------- Практика end -----------------------



----------------------- Проблемы -- решения start ---------

----------------------- Проблемы -- решения end -----------








----------------------- ЧЕРНОВИК -----------------------








