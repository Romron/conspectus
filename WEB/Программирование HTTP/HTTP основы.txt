Источники: https://youtu.be/nQU5K0DbofE

Термины:
Адресация
Маска сети
Смежные области:

// ============================== 31.05.2025 ======================================================================================



Адресация в сетях
   IP-адрес — это одно 32-битное двоичное число, которое записано как 4 группы по 8 бит в десятичном виде
   IP-адрес версии 4 (IPv4) состоит из четырёх десятичных чисел, разделённых точками: 192.168.0.1.
      Каждое из этих чисел — это 8-битное (то есть 1 байт) число от 0 до 255.
      В итоге IP-адрес IPv4 — это 32-битное двоичное число, разделённое на 4 части по 8 бит, которые записаны в десятичном виде для удобства.
         IP-адрес: 192.168.0.1
         В двоичном виде:
            192 = 11000000
            168 = 10101000
            0 = 00000000
            1 = 00000001
         Полный 32-битный адрес: 11000000 10101000 00000000 00000001
   IP(v6) - 128 бит и шестнадцатеричная запись
   Маска сети
      Предназначена для разделения IP-адреса на:
         Сетевую часть — у всех в одной сети она одинаковая.
         Хостовую часть — уникальна у каждого устройства в этой сети.
      Чтобы узнать сетевой адрес, нужно сделать побитовое И (AND) между IP и маской
         IP:    192.168.1.10     → 11000000.10101000.00000001.00001010  
         Маска: 255.255.255.0    → 11111111.11111111.11111111.00000000
         --------------------------------------------------------------
         Сеть:  192.168.1.0      → 11000000.10101000.00000001.00000000
   Специальные и частные адреса
      x.x.x.255 - широковещательное сообщение т.е. предназначено для всех устройств в данной сети (x.x.x. - адрес сети)
      255.255.255.255 - ограниченное широковещательное сообщение 
   Диапазоны адресов для построения локальных сетей
      10.x.x.x
      172.16.х.х - 172.31.х.х
      192.168.х.х 
   Для внутреннего использования т.е. внутри одного устройства(!) - localhost
      127.0.0.х
   Нет необходимости каждому устройству в сети давать уникальный адрес
   Сейчас чаще всего IP внутри сети раздаются автоматически DCP серверами
   
   МАС адрес это идентификатор т.е. физический адрес сетевой карты  
      считается что этот адрес уникальный в мире
      нужен ТОЛЬКО   для коммуникации устройств в одной сети 

   Адрес шлюза — это IP-адрес устройства, через которое твой компьютер выходит в другие сети, например — в интернет.
      IP: 192.168.1.100
      Маска: 255.255.255.0
      Шлюз: 192.168.1.1
      Когда ты хочешь открыть сайт, твой компьютер отправляет запрос не напрямую, а через шлюз (роутер), который уже знает, куда дальше пересылать.

В реальности интернет это глобальный набор локальных сетей 
   у каждой из которых свой IP сообщение между которыми происходит посредствам маршрутизаторов - серверов 
   для организации всего этого процесса служит NAT
   NAT (Network Address Translation) — это технология, 
      которая позволяет 
         нескольким устройствам с "внутренними" IP-адресами выходить в интернет через один "внешний" IP.
         нескольким программам с одного устройства выходить в интернет через порт
   NAT подменяет IP-адреса в пакетах, когда они идут из локальной сети в интернет и обратно.
      Пример:
         Внутри сети:
         Твой компьютер: 192.168.1.10:45678
         Телефон: 192.168.1.20:443
            где 45678 и 443 - порт на котором работает только одна определённая программа
         Внешний IP роутера: 45.67.89.100
         Когда ты заходишь на сайт:
         Сайт видит запрос с IP 45.67.89.100
         NAT на роутере запоминает
            с какого устройства и с какого порта на устройстве был отправлен запрос
            перенаправляет ответ обратно на тоже устройство и на тот же порт
            а программа "слушает" свой порт получая таким образом информацию
   порт это обычное число которое играет роль добавочного номера телефона
      порт необходим и есть всегда но из за того что в большинстве случаев они стандартные они прописываются по умолчанию и пользователи их не видят
   и так происходит по цепочке по сей глобальной иерархии сети от устройства которое отправляет запрос до устройства которое этот запрос получает и обратно

Получить информацию о цепи вызовов между подсетями к адресату запроса 
   утилита ping 
      отправляет тестовые пакеты по указанному адресу
      показывает каждый элемент цепи
      в консоли 
         ping [адресат] [ключ] [прочее]
   утилита tracert
      почти аналог ping но показывает более детальную информацию 

Выполнение тех или иных функций в сетях происходит с помощью служб
По сути весь интернет это набор служб к которым обращается пользователи
   HTTP - получение и просмотр веб страниц
   FTP - обмен файлами 
   DNS - соответствие доменного имени и IP 
   
Служба это совокупность
   сервер - программа 
      принимает запрос
      выполняющая его
   клиент - программа 
      отправляющая запрос 
      получающая ответ 
      интерпретирует его для пользователя
   протокол - спецификация 
      набор правил по которым происходит взаимодействие между клиентом и сервером
   службы программы которые обеспечивают работу служб прослушивают порты которые установлены им по умолчанию 
      FTP:21
      HTTP:80
      HTTPS:443
      MySQL:3306
      DNS:53


HTTP (HyperText Transfer Protocol) — протокол прикладного уровня для передачи гипертекста
   Основной протокол для передачи данных в интернете. Он определяет, как клиент (обычно браузер) и сервер обмениваются сообщениями.
   История
      Первая реализация: в 1991 г., использовалась вместе с URI и HTML
      HTTP/1.1 с 1997 и до сих пор очень распространён в интернете
      HTTP/2 с 2015
         Бинарный протокол
         Мультиплексирование (много запросов в одном соединении)
      HTTP/3 официально с 2022
   Общие свойства протокола
      Клиент-серверная модель
      Stateless — не хранит состояние между запросами
      Методы: GET, POST, PUT, DELETE, и др.
      Расширяемость через заголовки и коды состояния
   Для получения ОДНОГО любого ресурса по протоколу HTTP/1.1 необходима пара ЗАПРОС - ОТВЕТ
   Общая структура HTTP-запроса
      1. Стартовая строка или строка запроса состоит из трёх частей разделённых обязательными пробелами
         <метод запроса> <адрес ресурса на сервере обязательно начинается с /> <версия HTTP протокола>
            GET /path/index.html HTTP/1.1
      2. Заголовки запроса. 
         заголовки предназначены только для двух сущностей 
            Сервер т.е. ОС сервера
            Серверное ПО т.е. разработчикам серверных приложений
         их может быть много разных но обязательный только один 
            Host: site-url.com  -- обязательный заголовок 
         все полученные заголовки сервер ложит в одноимённые переменные
            HTTP_HOST: Host
            HTTP_USER_AGENT: User-agent
         Протокол расширяемый по этому можно послать любой свой кастомный заголовок 
            и он окажется в одноимённой переменной сервера
            кастомный заголовок принято начинать с большой буквы X 
      3. Окончанием запроса считается первая пустая строка
   Общая структура HTTP-ответа
      Стартовая строка
         HTTP/1.1 <Код состояния> <Пояснение>
            HTTP/1.1 200 OK
            HTTP/1.1 404 Not Found
            HTTP/1.1 500 Internal Server Error
         <Код состояния> - или статус ответа можно расширять через точку 
      Прочие строки в зависимости от ситуации
         Content-Type: text/html; charset=utf-8
         Content-Length: 1234
         Connection: keep-alive
      пустая строка - конец заголовков 
      после неё в некоторых методах, например POST, начинается тело запроса 
      которое в свою очередь оканчивается пустой строкой
      тело ответа ......................














================================== OLD ======================================================================================================

----------------------- ТЕОРИЯ start -----------------------
Адресация
Интервал адресов для локальных сетей
10.х.х.х
172.16.х.х - 172.31.х.х
192.168.х.х
Интервал адресов для внутреннего использования
127.0.0.х
Маска сети
мак адрес нужен только для соединения машин внутри локальных сетей

Виртуальные хосты https://youtu.be/sMUGgozqrYo
C:\Windows\System32\drivers\etc\hosts
127.0.0.1 имя сайта
apache\conf\extra\httpd-vhosts.conf
<VirtualHost 127.0.0.1:80>
ServerName имя сайта # ServerAlias альтернативные имена сайта через пробел
DocumentRoot "D:/web" абсолютный путь к папке сайта # ErrorLog "logs/dummy-host2.example.com-error.log" # CustomLog "logs/dummy-host2.example.com-access.log" common
</VirtualHost> ## Настройки папки виртуального хоста # <Directory "имя сайта"> # # AllowOverride none # AllowOverride All # # Require all denied # Require all granted # Options Indexes FollowSymLinks Includes ExecCGI # </Directory>
apache\conf\httpd.conf
<Directory />
##запрещает доступ к виртуальным хостам # Require all denied  
 ##разрешает доступ к виртуальным хостам
Require all granted  
 </Directory>
перезагрузить сервер
доменное имя в брацузере -->  
 обращение к DNS серверу(на локальной мошине это файл hosts) который возвращает IP -->  
 на сервер приходит запрос по IP а на сервере записано что это IP связан с конкретной папкой на локальной машине

----------------------- ТЕОРИЯ end -------------------------

----------------------- Практика start ---------------------
Рабочий код из файла httpd-vhosts.conf при этом в httpd.conf нет ничего об этом хосте
<VirtualHost 127.0.0.1:80>
DocumentRoot "F:/web"
ServerName web

      <Directory "F:/web">
         Options Indexes FollowSymLinks Includes ExecCGI
         AllowOverride All
         Require all granted
      </Directory>

   </VirtualHost>

для настройки виртуального хоста Laragon
для каждого из суб доменов в conf файлы laragon нужно прописать такой же блок
<VirtualHost \*:80>
DocumentRoot "D:/web/multisite"
ServerName multisite

         <Directory "D:/web/multisite">
            Options Indexes FollowSymLinks Includes ExecCGI
            AllowOverride All
            Require all granted
         </Directory>

        ErrorLog "D:/web/multisite/logs/multisite-error.log"
        CustomLog "D:/web/multisite/logs/multisite-access.log" common
      </VirtualHost>

строки для файла .hosts
127.0.0.1 multisite
127.0.0.1 premium-theme-1.multisite

----------------------- Практика end -----------------------

----------------------- Проблемы -- решения start ---------

----------------------- Проблемы -- решения end -----------

----------------------- ЧЕРНОВИК -----------------------
