Источники:
   https://youtu.be/Ti2Q4sQkNdU

Термины:

Смежные области:



----------------------- ТЕОРИЯ start -----------------------  
   ECMAScript 5
      переменные 
         var .....
            видима во всех блоках 
            существует в коде до момента её объявления
               пример 1:
                  b = 20; 
                  console.log(b);   // в консоль 20 
                  var b = 10;
               пример 2:  
                  console.log(b);   // в консоль ERROR
                  var b = 10;
      функции
         function(){}
            создаёт свой контекст вызова
            переопределить контекст:
               function(){
                  const self = this;
                  setTimeout(function(){
                     console.log(self)
                     },500)
               }
         параметры по умолчанию
            function(a,b,c){
               a = typeof a !== 'undefined' ? a : 42;
               b = typeof b !== 'undefined' ? b : 'default_b';
               с = с || 'defaul c'
            }
   ECMAScript 6  релиз 2015 года
      переменные
         let .....
            видима только в том блоке в котором обьявлена
            несуществует в коде до момента её объявления
               пример 1: 
                  console.log(b);   // в консоль ERROR 
                  let b = 10;
               пример 2: 
                  b = 20;
                  console.log(b);   // в консоль ERROR
                  let b = 10;  
               НО!!! пример 3
                  functiom func(){
                     b = 20;
                  }
                  let b;
                  func();
                  console.log(b);   // в консоль 20

            переменная с таким же именем объявленная вне блока будет существовать независимо
      константы  
         const .....
            всё тоже что и для let 
            нельзя переназначить НО можно изменить внутренее содержание есле это объект или массив
               пример 1:
                  cons b = 20;
                  b = 10;  // в консоль ERROR
               НО  пример 2: 
                  const b = [1,2,3,4];
                  b = 'str';     // в консоль ERROR
                  b.push(7);
                  console.log(b);   // в консоль [1,2,3,4,7]
      фукуции
         стрелочные функции они же лямда фукуции
            не создаёт свой контекст вызова а указывает на верхний контекст по стеку вызова
               пример  
               function(){
                  setTimeout(() => {
                     console.log(this)
                     },500)
               }
            const b = (a,b)=>{ return a + b }  // общий синтаксис
            const b = a =>{ return a ** 3 }  // если параметр один
            const b = a => return a ** 3  // если строчка одна
         параметры по умолчанию
            function(a=3,b=5){}


----------------------- ТЕОРИЯ end ------------------------- 


----------------------- Практика start ---------------------

----------------------- Практика end -----------------------



----------------------- Проблемы -- решения start ---------

----------------------- Проблемы -- решения end -----------








----------------------- ЧЕРНОВИК -----------------------








