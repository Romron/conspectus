Источники:

Термины:

Смежные области:



----------------------- ТЕОРИЯ start -----------------------  

----------------------- ТЕОРИЯ end ------------------------- 


----------------------- Практика start ---------------------
   ОБЯЗАТЕЛЬНО:
      включить отображение ошибок
         wp-config.php  define('WP_DEBUG', true)
      в <html >
         language_attributes();
      в хедер и футер 
         wp_head();
         wp_footer();
      в тег <body> 
         wp_body_class();  // в открывающем теге body
         wp_body_open();   // сразу после открывающего тега body 
      в тег <article>
         <article <?php post_class();  ?>></article>
      предоставить возможность пользователю темы оставлять коментарии везде(?)
      в конце страниц выводящих контент или комментарии нужны ф-ции 
         previous_post_link() и next_post_link() the_comments_navigation() для того что бы WP мог делить контент на страницы


   Часть имени файла после дефиса называется спецификацией 
      нужна для уточнения предназначения файла
         content.php
         content-serch.php
         content-page.php
   Подключение файлов только с помощью get_template_part('file_path','спецификация');
      для корректной поддержки дочерних тем
   Подключение стилей и скриптов только хуками в файле function.php
      варианты подключения
         подключение с выводом в разметку 
            wp_enqueue_stule();
            wp_enqueue_script();
         регистрация а вывод в разметку потом при необходимости в любом месте темы с помощью wp_enqueue_stule() или wp_enqueue_script()
               wp_register_stule 
   Форма поиска
      вывод в определённое место страницы
         get_search_form();
         виджет подгружается с помощью get_sidebar();
      по умолчанию 
         форма поиска подтягивается из ядра WP
      кастомизация
         в файле searchform.php
            get_search_form() -- с начала ищет в корне дочерней темы потом в корне родительской есле не находит то берёт из ядра
      включить HTML-5
         add_theme_support('html5', array(
            'search-form',
            /*не только форма поиска а и много всего другого */
         ));
      ограничение зоны поиска
         с помощью параметра name в скрытом поле:
            <input type="hidden" value="post" name="post_type">   // поиск только по записям типа post
      результаты поиска
         search.php 
         фильтр  get_search_form
   Безопасный вывод данных
      !!! в теме запрещено использовать конструкцию типа echo $.....  
         вывод данных в разметку только через спец ф-ции WP 
            esc_attr(); // данные в атрибут тегов 
            esc_html(); // экранирует HTML-теги 
            esc_url();  // подготавливает URL для вывода в вёрстку через  эту функцию нужно пропускать ВСЕ URLы даже те что генерятся WP 
               <a href="<?php esc_url(home_url('/'));?>">Home</a>
            wp_kses();  // то же что и esc_html(); но пропускает теги которые переданы вторым параметром в массиве
            wp_kses_post();  // то же что и  wp_kses(), но список разрешонных тегов задан WP по умолчанию 
            wp_kses_data();  // то же что и  wp_kses_post(); но для комментариев
            esc_js();   // inline JS 
            esc_textarea(); 
   Мультиязычность   интернализация темы
      указать WP файл для перевода lang/слаг_текст_домен.pot в файле function.php
         load_theme_textdomain('слаг_текст_домен',get_template_directory().'/lang');
      сгенерировать новый файл .pot для нужного языка 
         используется отдельный софт
            Poedit   https://poedit.net/
      слаг_текст_домен   задан в метополях в файле style.css 
      ф-ции для перевода
         __('text','слаг_текст_домен'); // возвращает значение
         _e('text','слаг_текст_домен'); // выводит на экран
         _x(); // 
         esc_html__('text','слаг_текст_домен'); // экранирование HTML сущностей 
         esc_html_e('text','слаг_текст_домен'); // экранирование HTML сущностей 
      перевод текста заданного перемнной
         printf(esc_html_e('что то %1$s ещё что то %2$s','слаг_текст_домен'),$var_1,$var_2)
      множественное число 
         _n();
   Стандартные виды страниц WP 
      Архивная
         это страница на которой выводятся все записи данного типа в хронологическом порядке
         иерархия 
            archive-post_type.php
               archive.php (есле нет предидущих)
      Страница поста
         это страница на которой выводятся конкретная запись (новость, пост, товар и т.п.)
         иерархия
            single-post_type.php
               single.php (есле нет предидущих)
         single-post_type.php нужно создавать тогда когда 
            уникальная вёрстка для данного типа постов находится вне цыкла WP
            есле уникальная вёрстка находится в нутри цикла WP (например карточка товара) 
               используется single.php
               создаётся шаблон части страницы
                  partials/contetnt-post_type.php
               подключается 
                  get_template_part('partials/contetnt',get_post_type());  // get_post_type() - возвращает тип поста для указания спецификации
      Страница таксономий  
         иерархия
            taxomony-taxonomy_name-term_name.php   // term_name это название конкретного элемента в таксономии
               taxomony-taxonomy_name.php
                  taxomony.php
                     archive.php (есле нет предидущих)
   Шаблоны для страниц (Custom Page Templates - шаблон для конкретной страницы)
      Главная страница
         архивная страница постов 
            в "настройках чтения" указать "Ваши последние записи" в качестве шаблона страницы будет использоватся файл index.php
         архивная страница кастомных типов записей
            в корне сайта создать файл с именем archive и спецификацией названием типа поста
         произвольная страница
            в "настройках чтения" указать "Статическая страница" в качестве шаблона страницы будет использоватся выбранная страница  из раздела страниц
               шаблон вёрстки задаётся при создании самой страницы 
            файл произвольной страницы
               название файла 
                  template-произвольное_имя.php 
               в начале файла мета поле в коментари
                  <?php
                  
                  /*
                  *  Template name: название шаблона     //будет отображатся в админке WP 
                  */
            файл с названием согласно иерархии шаблонов     при разработке тем не использовать!!
               название файла page а спецификация - слаг(заголовок страницы в админке WP) страницы 
                  страница about
                     page-about.php
            метабоксами
            page builders
   Циклы WP 
      записи любых типов достаются из базы данных по средствам цыклов
      Cтандартный цыкл WP 
         на каждом типе страниц свой запрос который генерируется в ф-ции wp_head();
            полученный массив данных нужно перебрать в цикле
      Кастомный цыкл WP 
         запрос генерируется в класе 
            $args = [
               'post_type'=>'my_type',
               'posts_per_page'=>2,    // кол-во записей на странице
            ]
            $my_query = WP_Query($args);
         полученный массив данных нужно перебрать в цикле
            но have_posts() и the_post() теперь методы от экземпляра класса
                $my_query -> have_posts() $my_query -> the_post() 
   Пагинация
         На архивных страницах
            передать в запрос номер текущей страницы
               $paged = (get_query_var('paged')) ? (get_query_var('paged')) : 1;
               $args = [
                  'post_type'=>'my_type',
                  'posts_per_page'=>2,    // кол-во записей на странице
                  'paged'=> $paged;
               ]
               $my_query = WP_Query($args);
               .... вёрстка ....
               <?php    // этот кусок кода лучше вынести в отдельную ф-цию в function.php
                  $big = 999999999; // need an unlikely integer
                  echo paginate_links( array(
                     'base' => str_replace( $big, '%#%', esc_url( get_pagenum_link( $big ) ) ),
                     'format' => '?paged=%#%',
                     'current' => max( 1, get_query_var('paged') ),
                     'total' => $my_query->max_num_pages
                  ) );
               ?> 
         На статических страницах всё так же но 'paged'=> $paged; нужно заменить на  'page'=> $paged;
            в функции пагинации нужно добавить проверку типа страниц
                $paged = '';  // инициализация пустой переменной -- требование WP (!!!)
               if(is_singular()){
                  $paged = get_query_var('page');
               }else{
                  $paged = get_query_var('paged');
               }
      ссылки на страницы пагинации
         внутри цикла перебора постов(!), до else
            posts_nav_link();
   Регестрация типов постов
      хук init функцией register_post_type();
      для простых тем регестрировать типы постов можно в function.php 
      для премиум тем регестрировать типы постов только в плагине
      после регистрации нового типа записи необходимо пересохранить (обновить) правила создания ссылок
         вручную
            зайти на страницу "настройках чтения" в админке и пересохранить
         автоматички 
            function my_func_rewrite_rules(){
               my_func_register_post_type();
               flush_rewrite_rules();
            }
            add_action('after_switch_theme','function my_func_rewrite_rules')
   Картинки - медиа файлы
      нарезка форматов картинки WP выполняет только в момент загрузки картинки
      нарезка уже загружежнных картинок
         плагин  Regenerate Thumbnails
      включить поддержку 'post_thumbneils' для темы
         add_theme_support('post_thumbneils');
      размеры установленные WP по умолчанию (их тоже можно менять)
         thumb 
         thumbnail
         medium
         lafge
         post-thumbnail
      зарегистрировать нужные размеры изображений в function.php
         чем больше размеров зарегистрировано тем больше места будет занимать сайт на хосте т.к. картинок может быть очень много!!
            по этому лучше переназначить стандартные размеры чем дополнительно регестрировать свои
         функция add_image_size();
         хук  'after_setup_theme'
      переопределение установленных размеров:
         update_option('thumbneil_size_w', 'нужная_ширина');
         update_option('thumbneil_size_h', 'нужная_высота');
         update_option('thumbneil_crop', true);
      вывод картинок в вёрстку
         has_post_thumbneil();   // проверяет есть ли картинка у поста
         the_post_thumbneil();   // выводит картинку в вёрстку
         get_post_thumbneil_id();   // выводит картинку в вёрстку
         get_the_post_thumbneil();  // возвращает изображение поста в виде HTML-тега <img> и его атрибутами причём в любом нужном размере 
         set_post_thumbneil_size(); // создаст тумбу указанного размера 
   Произвольные поля. Мета-боксы
      локальные данные привязанные к отдельному посту
      метобоксы которые завязаны на контенте должны быть в плагине
      Создание в админке WP 
         Хуком (приоритет для фриланса)  
            хук   'add_meta_boxes'
            функция  add_meta_box();
            этапы
               зарегестрировать в админ панели WP 
               создать вёрстку в админ панели WP 
               связать вёрстку с БД    хук 'save_post'
                  чтение  
                  запись - обновление
                     update_post_meta();  // обязательные проверки !!!!
                  Удаление
                     delete_post_meta();
                  пример
                     if($_POST['my_post_meta']){
                        update_post_meta($post_id, 'my_post_meta',sanitize_text_field($_POST['my_post_meta']));
                     }else{
                        delete_post_meta($post_id, 'my_post_meta');
                     }
            !! основные необходимые проверки и защиты
               wp_nonce_field();

               if( !isset( $_POST[ 'true_nonce' ] ) && !wp_verify_nonce( $_POST[ 'true_nonce' ], 'save-post-' . $_POST[ 'post_id' ] ) {   // в работоспособности не уверен
                  return post_id;
               }
               if(defined('DOING_AUTOSAVE') && DOING_AUTOSAVE){
                  return post_id;
               }
               if($post->post_type != 'my_post_type'){
                  return post_id;
               }
               $post_type = get_post_type_object($post->post_type);
               if(!current_user_can($post_type->cap->edit_post, $post_id)){
                  return post_id;
               }
         Классом (приоритет для фриланса)
         Плагином (приоритет для коммерческих тем)
            advanced custom fields    
               документация:     https://www.advancedcustomfields.com/resources/register-fields-via-php/ 
      Вывод в вёрстку
         echo get_post_meta(get_the_ID(), 'key_fild', true);      // третий параметр - возвращать строку или массив
   Таксономии
      !!!   если при регестрации типов постов включен редактор гутенберг его нужно включить и для таксономий иноче таксономии небудут подтягиватся к посту
      категории
         когда нужно по этому критерию в последствии делать сортировки поиски и т.п.
      метки       
      ф-ции для таксономий
         is_tax('tax_name','term_name');
         taxomony_exists();   // перед созданием таксономий проверить не занято ли имя
   Sidebar
      это контейнер для виджитов
      регестрация в function.php
         register_sidebar(arrey());
      вывод в вёрстку на любой странице
         get_sidebar('ny_name');    // без имени подтянет  sidebar.php
      файл шаблона 
         sidebar-any_name.php
            sidebar.php (есле нет предидущих)
      вёрстка самого Sidebar
         в файле шаблона
               if(!is_active_sidebar('id_указанный_при_регестрации')){  // проверка на наличие виджита в сайдбаре
                  return;
               }
               echo '<aside id="" class="">';
               dynamic_sidebar('id_указанный_при_регестрации');
               echo '</aside>';
   Виджиты
      создать класс который будет расширять WP_Widget   
   Дочерняя тема  -- наследует и расширяет родительскую
      для коммерческих тем обязательно положить в папку с архивом заготовку дочерней темы
      в папке с темами папку дочерней темы 
         имя то же что и родительской спецификация child 
      в папке дочерней темы
         style.css
            мета поля:
               /*
                  Theme name: My theme child
                  Description: A childe theme for my theme
                  Autor: ....
                  Template: slag parent theme      // ОБЯЗАТЕЛЬНО!
                  Version: 1.0
               */
         function.php
   Подключение необходимых плагинов к теме
      TGM Plugin Activation
         нужно переносить в том числе и папку языков
   Options Настройки
      глобальные настройки привязаные ко всему сайту
      метобоксы которые завязаны на стилях должны быть в теме
      Создание в админке WP 
         Хуком 
         Плагином
            Redux
               файл настроек redux-options.php  содержимое взять из файла redux-framework/sample/sample-config.php
            Получение данных из полей в вёрстку
               все значения полей в глобальном масиве имя которого задаётся в начале файла настроек redux-options.php   $my_arr_options 
                  global $my_arr_options;
                  echo $my_arr_options['my_field_mane'];
   Core плагин для темы
      размещение 
         в корне темы папка plugins в которой 
            папка плагина с названием my_theme_name-core
      структура 
         index.php
         my_theme_name-core.php
            /*
               Plagin name: my_theme_name core
               version: 1.0
               Text Domain: my_theme_name-core
            */
      защиты и проверки
         обращение к плагину от WP 
            if(!function_exist('add_action')){
               exit;
            }
      нюансы 
         get_template_directory() в плагинах не работает
            в место неё     plugin_dir_path(__FILE__);
      использование
         добавить в ZIP архив
         установить и актевировать через админку WP
   Передать переменные в js скрипты
      wp_localize_script();
   Ajax  лучше делать на jQuery
      подключить файл скрипта с ajax 
         wp_enqueue_script();
      передача переменных в файл ajax 
         wp_localize_script(
            my_theme_name-file_ajax_name,
            my_theme_name-file_ajax_name-script,   // имя объекта в js который будет содержать переменные указанные в массиве
            arrey(
               'ajaxurl' => admin_url('admin-ajax.php'),
               'nonce' => wp_create_nonce('ajax-nonce'),    
               ...... и другие переменные .....
            )
            );
      ajax.js
         jQuery(document).ready(function($){
            $('#my_button').on('click',function(e){
               e.prevendDefault;

               $.ajax({
                  url: my_theme_name-file_ajax_name-script.ajaxurl,
                  data:{
                     'action':'название функции обработчика на back end',  // в function.php
                     'nonce': my_theme_name-file_ajax_name-script.nonce,
                      ...... и другие переменные .....
                  }
                  success: function(data){
                     ..... действия с полученными данными
                  },
                  error: function(errorThrown){
                     ..... действия при ошибке
                  }
               })
            })
         })


   Функции
      работают и вне цыкла в том числе
         the_archive_title();
         the_archive_description();
      is_singular('name_post_type');

----------------------- Практика end -----------------------



----------------------- Проблемы -- решения start ---------

----------------------- Проблемы -- решения end -----------








----------------------- ЧЕРНОВИК -----------------------








