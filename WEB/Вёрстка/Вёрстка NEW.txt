Источники:
   Класическая вёрстка от Лаврик Дмитрия     https://nnmclub.to/forum/viewtopic.php?t=1481348
   Чотири критерії якості HTML-верстки       https://youtu.be/2tEvlbOmyL0
   Фигуры на CSS              https://html5book.ru/css-figury/
Термины:


Смежные области:
   Анализ psd макета онлайн 
      !!!   https://youtu.be/bigvU9YnQPA  
      https://psdetch.com/
   Нарезка PSD макета   https://youtu.be/pLWAzoDvWsc



----------------------- T O D O  -----------------------  



Добавить в набор миксинов
   + адаптивное свойство     https://youtu.be/eaOAY0vIB4U
   + адаптивный шрифт     https: //youtu.be/HJZP5QsrpXs

Добавить в снипиты
   + @media (any-hover: hover){ :hover{ something } }     /* устройства которые поддерживают hover*/
   + @media (any-hover: none){ something }     /* устройства которые не поддерживают */
   + для адаптивного шрифта
   + для адаптивного свойства

добавить в сборку gulp 
   первичная оброботка данных из полей формы
   pop-up окно при отправке формы 


----------------------- TO USE  -----------------------  

минимальная ширина поддерживаемого экрана 320px !!!

динамический адаптив т.е. перенос элемента в разные блоки в зависимости от размера экрана https://github.com/FreelancerLifeStyle/dynamic_adapt

для стилизации похожих длоков использовать модификаторы

указывая отступы между элементами внутри блока учитывать ситуацию при которой некоторые блоки будут отсутствовать
   :not(:last-child){ }    /*как вариант*/

отступы от текста делать отзывчивыми, будет работать только есле размер шрифта то же отзывчивый
   расчитывать в em по формуле:   размер отступа в px / font-size текста * 1 em

адаптив картинок должен быть за счёт пропорций сторон  высота вложенной картинки с помощью  padding   padding: 0px 0px высота px / ширину px * 100%  0px

размер шрифта делать отзывчивым с помощью примеси

@media (any-hover: hover){ 
   :hover{ }
}

мелкие элементы типа точек пагинации выполнять спомощью псевдокласов before и after

для скрытия элементов страницы меню и др !!
   transform: skale();   
   visbility: ;

pointer-events: ;  // делает указанный элемент прозрачным для курсора и ещё кучу всего для SVG 

@supports(){}   /*медеа запрос*/

:not(:last-child){ }     // всё кроме селектора указанного в скобках

что бы flex элемент не растягивались на весь экран задать ему aligh-self: center;

Примитивные фигуры
   + 
      :before{
         content: '';
         position: absolute;
         left: 50%;
         top: 50%;
         transform: translate(-50%, -50%)
         width: 50%;
         height: 1px;
         background-color: black;
      }
      :after{
         content: '';
         position: absolute;
         left: 50%;
         top: 50%;
         transform: translate(-50%, -50%)
         width: 1px;
         height: 50%;
         background-color: black;
      }
   х
      тоже что и плюс но весь элемент повернуть на 45 град
      .elem{
         transform: rotate(45deg);
      }

Выравнивание
   по вертикали:
      top: 50%;
      transform: translate(0, -50%);

   по  центру родителя  -- проверить
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%)

UI-компоненты
   тег <details>  https://youtu.be/VFNGjDNBaMY



----------------------- ТЕОРИЯ start -----------------------  

   Основные постулаты которые позволят делать резиновую вёрстку быстро, качественно и надёжно:
      Как можно больше использовать проценты.
      Как можно больше использовать формулы автоматического рассчёта размеров.
      Как можно больше использовать коэффициенты.
      Как можно больше использовать grid.
      Искать способы написания меньшего количества стилей, для того, чтобы переложить работу для рассчёта размеров на браузер.
      Для корректного отображения всех изображений использовать cover или contain.

   Критерии качества вёрстки
      соответствие макету
      соответствие техзаданию
      надёжность - кросбраузерность
         устайчивость и адекватность сайта в
            разнообразных браузерах и устройствах отображения
            системах управления контента
            разнообразным форматам и размерами контента
      удобство 
         юзабилити зона ответственности дизайнера(?)
         адекватность анимации
         удобстов в адаптивной версии
      скорость
         оптимизация 
         минимизация
         оптимальная последовательность загрузки элементов сайта
      семантика
         соответствие требованиям поисковых роботов
      доступность
         для пользователей с ограниченными возможностями

   Способы организации стилей    нужно комбенировать!!
      Модульнаяя система
         БЭМ
      По назначению
         для всех проэктов
            нормализация стилей  normalize.css
               нормализация стилей устанавливаемых браузерами по умолчанию
            нормализация CSS     reset.css
               сброс правил оформления стандартных элементов
         для нескольких страниц одного проэкта  
            основных блоков (основные обёртки, контейнеры, .col .row) 
               в файле basse.css
                  шрифты
                  стили шрифтов 
                  цвета фонов 
                     для эмитации переменных можно сделать отдельными классами
                  стили заголовков
                  стили отдельных тегов
            мелких сквозных блоков (кнопки, блоки иконок, менюшки)
         для конкретных элементов конкретной страницы (header, footer, aside)

   Категории контента      https://html5book.ru/kontentnaya-model-html5/      https://developer.mozilla.org/ru/docs/Web/HTML/Content_categories

   Правила вложенности тегов
      в соответствии с категориями контента 
         каждый тег пренадлежит к одной или нескольким(?) категориям
         для каждой категории прописано      https://developer.mozilla.org/ru/docs/Web/HTML/Element/strong
            какую категорию можно влаживать 
            в какую можно влаживать
      проверка правельност вложенности валидаторы     https://validator.w3.org/#validate_by_upload

   Обёртки
      Смысловая, семантическая
         <artical>
         <section>
      Стилистическая, структурная
         <div>
         <span>

   Иерархия заголовков
      предназначенна для смыслового структурирования содержимого страницы
         <h1>  главная мысль страницы
            <artical> <header> <h2>  обязательно должен быть есле дальше есть h3 перескакивать нельзя </h2> </header>
               <section> <h3> </h3>
                  <p></p>
                  <p></p>
               </section>
               <footer>
                  <a> иконка на соц сеть 1 </a>
                  <a> иконка на соц сеть 2 </a>
                  <a> иконка на соц сеть 3 </a>
               </footer>
            </artical>
         </h1>

   Семантические теги     часть SEO
      прежде всего  для правельного отображения страницы на специфических устройствах 
         на пример для слепых 
      второстепенное использование манипулирование поведением поисковых роботов

   Селекторы
      Приоритет селекторов
         чем меньше выборка по селектору тем выше приоритет
            селектор тега 1 бал
            селектор класа 10 балов
            псевдо класы и псевдо элементы 10 балов
            селектор id  100 балов
            inline стили 1000 балов
            !important 10000 балов
            !! группировка не увиличевает колличество баллов
      ID элемента 
         Назначение  - уникализация элемента страниоцы 
         использование
            к адресу страниоцы добавить #id_element страница прокрутится к элементу
      Тег использовать не желательно т.к. при внесении правок вёрстка сламается
      Класс обеспечивает максимальную гибкость
      БЭМ

   Выравнивание
      Cтрачно-блочные элементы   display: inline-block;
         только три режима по левому, краю по правому, краю по центру.
         горизонтальное    text-align:   ;
         вертикальное      vertical-align: ;
      Флекс блоки      display: flex;

   Блочная модель
      см. картинку!
      Строчные элементы    display: inline;     ФРАЗОВЫЙ КОНТЬЕНТ
         :before :after то же строчные
         размеры по контенту width и height игнорируются
         отступы 
            горизонтальные работают
               !! перенос строки из HTML разметки отображается как один продел !!
                  обнулить размер шрифта для родителя 
                     font-size:0;   (+!)
                  венрнуть размер шрифта для потомков 
                     font-size: 16px;   (+!)
            вертикальные  не работают   
               вертекальные отступы можно задавать высотой строки
               сделано для того что бы строчные элементы не выпадали из текста и не ломали его
               позиционируются по середине строки
               ! есть междустрочный интервал
      Блочные элементы     display: block;      ОСНОВНОЙ ПОТОК
         реальные размеры задаються в css
            box-sizing
               default:
                  реальная ширина блока равна width + margin-left + margin-right + padding-left + padding-right + border-left + border-right
               border-box:
                  реальная ширина блока равна width 
                  но растояние между соседними элементами с лева и с права будет равно  width + margin-left + margin-right 
         вертикальные margin 
            не сумируется, выбирается больший 
            !! крайние вертикальные т.е. первого и последнего ребёнка
               вылезают за пределы контейнера т.е. отталкивают родителя от его соседей
                  решение
                     прозрачный бордер родителю
                     padding-top: 1px; родителю
                     overlow: hidden
      Строчно-блочные элементы   display: inline-block;
         реальные размеры задаються в css 
            box-sizing
               default:
                  реальная ширина блока равна   width + margin-left + margin-right + padding-left + padding-right + border-left + border-right
               border-box:
                  реальная ширина блока равна   width + margin-left + margin-right
         горизонтальные отступы работают
            !! перенос строки из HTML разметки отображается как один продел !!
               обнулить размер шрифта для нужного блока
                  font-size:0;   (+!)         
         вертекальные отступы работают 
         вертикальные margin сумируются
         вертекальные отступы можно задавать высотой строки
         позиционируются по середине строки
         ! есть междустрочный интервал

   Адаптивность
      Два подхода 
         ореинтир на стандартные размеры экранов
         ореинтир на требование макета
      Обязательно:
         <meta name="viewport" content="width=device-width, initial-scale=1.0">
      проценты
         контейнер
            min-width   не меньше указаного значения
            max-width   не больше указаного значения     
         внутрение элементы 
            ширину нельзя задавать в пикселях
               что бы совместить с фиксироваными отступами:
                  width: calc(100% / кол-во_элементов_в_ряд - margin_элемента * 2 px);
         отступы
            горизонтальные padding в процентах от ширины родителя который в свою очередь зависит от ширины экрана
               применяется для картинок которые пропорционально изменяются не меняя своего позиционирования
      относительно шрифта
         rem 
            множитель размера шрифта относительноо тега html
               html{
                  font-size: 10px;  
               }
            суть в том что при изменении размера шрифта, например в медиа запросе 
            изменится все размеры заданные в rem

   Переменные
      область видимости
      объявление
         начале файла
            :root{      /*глобальная область видимости т.е. во всех файлах подключённых ниже*/
               --var_1_name: var_1_value; 
               --var_2_name: var_2_value; 
            }
            в людом селекторе ???
         
      обращение
         свойство: var(--var_1_name);
         свойство: calc(var(--var_1_name) * var(--var_2_name));
      изменение 
            селектор{      /*измениться только(!) в нужном селекторе*/
               --var_1_name: var_1_new_value;
            }
            @media screen and (max-width: 400px){     /*измениться только(!) для данного брейкпоинта*/
               :root{
                  --var_1_name: var_1_new_2_value;
               }
            }

   Сетки
      простая пороизвольная
         для поулучения сетки контейнеру добавить класс row а ячейкам класс col
         ширина ячеек в ряду 
            определяется формулой width: calc(100% / кол-во_ячеек_в_ряду - горизонт_margin_ячейки * 2)
            назначается непосредственно ячейкам в зависимости от ширины экрана (медиа запросы, брекпоинты)
         .row{    /*контейнер*/
            margin: 0 -10px;
            font-size: 0;     /*удалить пробел */
         }
         .col{    /*карточки*/
            font-size: 16px;    
            box-sizing: border-box;
            display: inline-block;
            vertical-aligne: top;
            margin: 0 10px;
         }
      на 12 колонок
         12 потому что кратно 1, 2, 3, 4, 6, 12 
         т.е. для изменения размера ячейки нужно выбрать количество колонок которые она будет занимать
         формула
            width: calc(100% / кол-во_ячеек_в_ряду * кол-во_занимаемых_ячеек - горизонт_margin_ячейки * 2)
               кол-во_ячеек_в_ряду всегда равна 12
         Smart Grid        https://www.npmjs.com/package/smart-grid     автор библиотеки Д. Лаврик
      js библеотека (nod-modul) для генерации препроцессорной сетки для flexbox по заданным настройкам ввиде json объекта 
      Алгоритм использования
         используется только вместе с GULP или webpack
         Smart Grid генерирует примеси для LESS, SCSS, SASS или Stylus. 
         примеси используются для быстрого написания кода 
         результат собирается GULP через: group-css-media-queries autoprefixer clean-css
      установка
         npm i smart-grid -D       // 213 загрузок за неделю!
      использование  см в конспекте по GULP 
         smartgrid.js      // работает как модуль js 
            module.exports = {
               columns: 24,
               offset: "10px",      // растояние между колонками
               container: {         // внешеий контейнер сайта
                  maxWidth: "950px",
                  fields: "30px"    // поля сайта
               },
               breakPoints: {
                  md: {
                     width: "900px",
                     fields: "15px"
                  },
                  sm: {
                     width: "720px"
                  },
                  xs: {
                     width: "576px"
                  },
                  xxs: {
                     width: "400px"
                  }
               },
               mobileFirst: false
            }
         в main.less
            @import "smart-grid.less";

   FLEX
      контролируется только главная ось причём каждая из главных осей отдельно
      для всех элементов 
         margin 
            по умолчанию равен auto   т.е. заниет всё свободное пространство в т.ч. и по вертикали
            вертекальные складываются
         min-width по умолчанию равен auto
            т.е. элемент не может быть меньше контента а значиить наборы символов будут переносится только по пробелам
               исравить: 
                  word-wrap: breack-word;                                                                                                                                                                                                                                     
      width-base 
         базовый размер отличается от width только тем что  width-base измеряется вдоль основной flex оси направление которой может меняться
      width-grow - пропорция по которой элементы делят между собой только(!!) свободное пространство --  жадность
         по умолчанию равен 0 т.е. не стримится занять свободное пространство
         не влияет на переносы на другие строки
         ! для каждой строки расчитывается отдельно
         !! не может быть больше max-width
      width-shrink - коэфициент с которым элемент отдаёт своё бозовое пространство -- уступчивость  
         т.е. элементы с разным shrink будуть отдавать своё базовое пространство с разной скоростью
         !! не может быть меньше min-width
         по умолчению равно 1
         0 не уступчивость width-base превращается в аналог жостко заданому width-min
            т.е. элементы будут выходить за пределы родителя при уменшении его размера
         чем больше число тем быстрее элемент будет сжиматься

   Grid layout   
   flexboxgrid

   Семантические теги
      Стуктурируют пространство HTML страницы по смыслу(!)
         Необходимы для SEO !!!!
         Нужны для специальных устройств
         ведут себя как обычные div
         ведут себя как обычные div
      структурные 
         т.е. могут быть использованы вместо блочных элементов
         не желательно использовать в качестве селекторов
         <header>
            шапка секции или статьи(!!!!) а не документа!!!
            обёртка для смысловых элементов 
               нужно использовать только когда есть группа вложенных смысловых элементов
         <nav>
            обёртка для 
               ключевой навигационной группы
                  меню
                  группа(!) ссылок 
         <aside>
            вспомогательный контент, сайд бар и прочее
         <main>
            для выделения главного на странице(!!!) 
               контент, уникальный на сайте, ради которого эта страница и создавалась
         <section>
            обёртка для логического длока данных но не статья  
            нельзя везде использовать вместо тега div
            могут быть вложенными друг в друга
         <footer>
            подвал секции или статьи(!!!!) а не документа!!!
            обёртка для смысловых элементов 
               нужно использовать только когда есть группа вложенных смысловых элементов

      <article>
         обёртка для однотипных логических блоков данных типа статья, сообшение
         должен содержать заголовок, h2 или меньше
         может содержать <header> <footer>
      <figure>
         обёртка для автономного контента малозначимого для поисковиков 
         типа картинки, видео, диаграм, 
      <figcaption>
      подписи картинок и т.д.

      <details>
         скрывает, типа спойлера, всё содержимое кроме тега <summary>
      <summary>

      <mark>
         подсвечивается браузером по умолчанию
      <time>

   Еденницы измерения
      абсолютные
         пиксель
            базовая еденица - все остальные значения перещитываются браузером в пиксель
               допускаются дробные  числа

      относительные
         em - относительно текущего, заданного или унаследованого(!), размера шрифта
            1 em равен значению font-size
            формула пересчёта в пиксели 
               пусть задано width: 1.5em;
               ширина в пикселях будет = 1.5 * текущий font-size 
            наследуется потомками
            допускаются дробные числа
         rem - относительно размера шрифта тега html а если он не задан то браузера по умолчанию
            допускаются дробные числа
         проценты - в разных случаях проценты берутся от разных велечин!!! Уточнять в каждом отдельном случае!!
         вьюпорт  
            vw - ширины 100vw равно ширене вьюпорта
            vh - высоты 100vw равно высоте вьюпорта
            vmin - наименьшеого из значений между vmin или vmax   100vmin  по аналогии
            vmax - наименьшеого из значений между vmin или vmax   100vmax  по аналогии

----------------------- ТЕОРИЯ end ------------------------- 


----------------------- Практика start ---------------------
   Типичная структура страницы
         <h1>  главная мысль страницы
            <artical> 
               <header> 
                  <h2>  обязательно должен быть есле дальше есть h3 перескакивать нельзя </h2> 
               </header>
               <section> <h3> </h3>
                  <p></p>
                  <p></p>
               </section>
               <footer>
                  <a> иконка на соц сеть 1 </a>
                  <a> иконка на соц сеть 2 </a>
                  <a> иконка на соц сеть 3 </a>
               </footer>
            </artical>
         </h1>
   Теги
      <head> - настройки валедации страницы
      <header> - семантический тег,  видимое содержимое части страницы 

   Алгоритм вёрстки
      normalize.css подключить
      бозовые стили  
         глядя на дизайн выделить в элементах одинаковые внешние признаки
            размер шрифта, отступы, фон и т.д.
         группировать элементы станицы одинаковые внешним признакам
         в последствии элементы из группы выводятся и им прописываются уникальные стили
      сетка
         настройки
            кол-во колонок 
            offset: межколоночное растояние 
            настройка контейнера
               max-width
               fields:  горизонтальные pading контейнера недолжены быть меньше половины offset т.к. возникнет горизонтальная полоса прокрутки
            breakPoints
            defoultMediaDevice
         для каждого горизонтального экрана нужно задать
            контейнер
            строку 
            стобцы
            установить способ центровки элементов
   
   Центровка горизонтальных блоков для того что бы фоны блоков не ограничивались по ширине
      простой способ
         внутри каждого симантического блока 
         создать дополнительную обёртку с одинакавым классом
            для которого
               max-width: 1280px:
               margin: 0 auto;
         ширину симантического блока при этом не указывать
      сложный способ
         каждому симантическому блоку
            padding: 10px calc(50% - 0.5*желаемой_шириы) 
      приэтом !
         для прилипания внутрених элементов, карточек, к границам центрующего контейнера 
         нужно компенсировать margin только крайних карточек
            для карточки помещают в ещё одну обёртку которой нужно задать отрецательный горизонтальный margin

   Простые геометрические фигуры    https://youtu.be/Irj55RYH254

   Картинки
      т.к. картинки это строчно блочный элемент то по умолчанию картинки всегда будут стримится занять свой физический размер т.е. будут выходить за пределы родителя
      для устронения этого по умолчанию для всех картинок
            img{
               max-width: 100%;   // для того что бы картинки не выходили за пределы родителя
               height: auto;     // для того что бы сохранить пропорции картинки 
            }
   
   Фоновое изображение блока
      1. С помощью псевдо элемента :before          https://css-live.ru/articles/adaptiruyushhiesya-kartinki-zastavki-na-css.html    https://codepen.io/necolas/pen/ngEdpa


   Блоки с заданным соотношением сторон высота вложенной картинки с помощью  padding   !!!!!!!!!!        https://css-live.ru/articles/adaptiruyushhiesya-kartinki-zastavki-na-css.html
      по сути таким способом задаётся соотношение сторон сложенного блока
         результатом padding-а в 25% будет пропорция 4:1, padding в 33.333% в 3:1 соответственно, и т.д.
          padding: 0px 0px нужная высота картинки в px / ширина карточки в px * 100% 0px;
      подробнее:
         если для блочного элемента не задано явно значение свойства height, то высота элемента будет автоматически рассчитана на основе его содержимого. 
            при этом, если для элемента заданы значения свойств padding-top или padding-bottom, то они будут увеличивать высоту элемента.
         суть в том, что процентное значение свойств padding-top или padding-bottom берётся от ширины родителя. 
            таким образом, если установить для элемента, например абсолютно позиционированной картинки,  значение padding-bottom: 50%, 
            то это означает, что его нижний внутренний отступ будет равен 50% ширины его родителя.
            а т.к. высота элемента определяется как сумма его содержимого и внутреннего отступа, 
            высота элемента также будет равна 150% его ширины (100% ширины(?!) + 50% отступа). 
            a поскольку высота элемента не указана явно, она будет автоматически рассчитана браузером на основе его содержимого и внутреннего отступа.
         т.е. если вы установите значение padding-top: 50% для элемента, то это приведет к тому, что его верхний внутренний отступ будет равен 50% его ширины, 
            а высота элемента также будет равна 150% его ширины.
   
   карзина товаров с анимацией      https://youtu.be/3z7TRd7tzhE     3:27:25


   Трансформация поворот движение
      transform: ;

----------------------- Практика end -----------------------



----------------------- Проблемы -- решения start ---------

----------------------- Проблемы -- решения end -----------








----------------------- ЧЕРНОВИК -----------------------








