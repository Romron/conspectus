Источники:
   Стандарты и спецификации
      https://html.spec.whatwg.org/       !!! максимально полное описание всего(!!) что связано с HTML 
      https://html.spec.whatwg.org/#toc-semantics     !! семантика и прочее о каждом теге
      https://ru.w3docs.com/uchebnik-html/html-teg-b.html   все теги
      https://caninclude.glitch.me/    !!! валидатор вложенности !!!
   Сокрыти элементов DOM c учётом SEO
      https://youtu.be/lWu8fuCdk54
      https://allyjs.io/tutorials/hiding-elements.html      !!!! 
      https://www.cat-in-web.ru/10-ways-to-hide-elements-in-css/
   z-index и контекс наложения
      https://youtu.be/IUOvlLUxfP4?si=9q8oMvZsNdDJYB2w
      https://chromewebstore.google.com/detail/z-context/jigamimbjojkdgnlldajknogfgncplbh?hl=ru    показывает z-index в инструментах браузера
   Структура html страницы:
      !! https://developer.mozilla.org/ru/docs/Learn/HTML/Introduction_to_HTML/Document_and_website_structure  
   Класическая вёрстка от Лаврик Дмитрия     https://nnmclub.to/forum/viewtopic.php?t=1481348
   Чотири критерії якості HTML-верстки       https://youtu.be/2tEvlbOmyL0
   Фигуры на CSS        https://html5book.ru/css-figury/
                        https://habr.com/ru/articles/126207/
   иконки с выбором цвета:       https://icons8.com/
   иконки разные:    https://www.flaticon.com/free-icon/star_276049?related_id=276049&origin=pack
   соотношение сторон
      https://youtu.be/93eVd-lUVLM
   SVG:
      https://youtu.be/Yzj8bBCq7Eg?si=ew9ld1R75aVrLryo
      https://prgssr.ru/development/oformlenie-soderzhimogo-use-v-svg-s-pomoshyu-css.html#heading-svguse----dom      !!
      https://svgontheweb.com/ru/
      https://css-tricks.com/svg-use-external-source/
      https://css-tricks.com/svg-use-with-external-reference-take-2/
      https://allyjs.io/tutorials/focusing-in-svg.html      Managing focus in SVG                                                                                      
      https://www.w3.org/TR/xml-stylesheet/
      анимация:
         https://youtu.be/LGYkzJ5FxmQ?si=bnU3X4hZFNgn8pL0      !!
         https://youtu.be/g0RzCKhuA-E?si=kf_wqHAJwkBTg7-3   анимация иконок  
   <details> and <summary>
      ! https://habr.com/ru/articles/477520/
   BEM 
      https://github.com/yoksel/common-words    cлова, часто используемые в CSS-классах

   Чекбоксы 
      https://youtu.be/E6kLaaQFctU?si=RT1DOBvm7jrB91pi         !!!



Термины:


Смежные области:
   Анализ psd макета онлайн 
      !!!   https://youtu.be/bigvU9YnQPA  
      https://psdetch.com/
   Нарезка PSD макета   https://youtu.be/pLWAzoDvWsc



----------------------- T O D O  ----------------------- 

   Изучить  
      https://allyjs.io/tutorials/mutating-active-element.html

   Добавить переменные less с стандартными размерами девайсов для адаптивной вёрстки
      @tablet
      @phone
      и т.д.
   тогда адаптация упрощается:
      медиазапросы для конкретного стандартного размера
      а между стандартными размерами ризиново-отзывчивые свойства

   Разобраться с атребутом data 

   Перечень сниппетов:
      @media (any-hover: hover){ :hover{ }}

   Собрать колекцию функционала в одном js файле      2:10:04  https://www.youtube.com/live/-BfkocOApc0?si=WC7g1dOeH_mVI_Vo
      в виде:
         import frontFunctions from "/moduls/frontFunctions.js";

         /* Модуль для работы со спойлерами 
            Описание: 
            Сниппет HTML: spollers 
         */  
         // frontFunctions.spollers();

         /* Модуль для работы с табами  
            Описание: 
            Сниппет HTML: tabs 
         */  
         // frontFunctions.tabs();

         /* Модуль для работы с Попапы  
            Описание: 
            Сниппет HTML: pl 
         */  
         // frontFunctions.initPopUps();

         /* Модуль для работы с Бургер   
            Описание: 
            Сниппет HTML: burg 
         */  
         // frontFunctions.burgers();

         /* Модуль для работы с Menu   
            Описание: 
            Сниппет HTML: Menu 
         */  
         // frontFunctions.menus();

      !! в dest файл должны попадать только те строки
         которые были раскоментированы в src файле
      исходники функций для колекции искать у Жеки на канале
      Для этих функций подготовить файл с глобальными стилями:
         для картинол, кнопок, svg, ссылок, menu, burger, tabs и прочего

   все размеры должны быть в ремах миксин для перевода из пиксилей в ремы
   Сделать снипет для меню и для бургера
   Сделать снипет для спойлера

   подготовить файл с глобальными стилями:
      для картино, кнопок, svg, ссылок, menu, burger и прочего

   Теневой DOM    Изучить 
      https://frontender.info/shadowdom/
      https://frontender.info/shadowdom-201/       !!! Стилизация элементов теневого DOM в т.ч. элемнтов svg спрайта  
      https://learn.javascript.ru/shadow-dom-style

   при вёрстке любых меню предусматривать возможность неограниченного количества элементов на любом уравне
      т.е. элементы не предусмотренные в макете прятать за выпадающим списком

   добавить в сборку gulp 
      первичная оброботка данных из полей формы
      pop-up окно при отправке формы 

   при вёрстке под wp обязательно предусматривать несколько уровней вложенности выпадающего меню 

   проверить:
      https://youtube.com/shorts/_GFy0QC_OcU?feature=share


----------------------- TO USE  ----------------------- 

   модальные окна лучше делать с помощью популярных библиотек(?!)
      


   если  из-за какого то одного элемента поехала вёрстка и появился нижний скролл:
   * {outline: 1px solid red;}

   Статистика разрешений экранов интернет-пользователей с 2024 г. в режиме реального времени
      https://ru.screenresolution.org/
   Наиболее часто используемые расширения экранов для создания адаптивной вёрстки включают:
      320px (Мобильные устройства, портретная ориентация)
      480px (Мобильные устройства, ландшафтная ориентация)
      768px (Планшеты, портретная ориентация)
      1024px (Планшеты, ландшафтная ориентация)
      1280px (Ноутбуки и настольные компьютеры)
      1440px (Настольные компьютеры, широкоформатные мониторы)
      1920px (Настольные компьютеры, широкоформатные мониторы, Full HD)

   свойства CSS      https://youtu.be/jLJU27MNdQs?si=HgHyaEnR6IjaRoTn
      изменение высоты блока  пропорционально изменению ширины  
         width: 100%;
         aspect-ratio: 16/9;  
      функция CSS аналогична миксину adaptive-property      https://habr.com/ru/companies/ruvds/articles/501634/
         clamp();
      селектор плейсхолдера input 
         input::placeholder{}
      цвет и форма курсора в полях ввода     https://css-tricks.com/almanac/properties/c/caret/
         caret: #ff7a18 underscore;
      счётчик отображений определенного элемента
         counter-reset        https://itwiki.dev/ru/front-end/css-reference/properties/counter-reset
      привязка скролла к точкам блокам
         scroll-snap-type        https://developer.mozilla.org/ru/docs/Web/CSS/scroll-snap-type
      маски для блока
         clip-path      https://habr.com/ru/companies/skillfactory/articles/539064/
      градация серого, размытие и прочее для любого блока
         filter      https://developer.mozilla.org/en-US/docs/Web/CSS/filter

   скрывая элемент с помощью opasity: 0; необходимо добавлять visibility: hidden; 
      что бы со скрытым элементом нельзя было взамиодействовать 

   ширина флекс элемента НЕ должна быть задана  через width 
      нужно так 
         flex 0 0 30px

   поиск неиспользуемого js и css кода
      https://youtu.be/-dZbD2yxLQs?si=kWyiaQ9ExSF06iEN

   Разделять классы элементов 
      те которые используются только в стилях 
      те которые используются в js

   подключение js скриртов к плагинам Элементора
      для того что бы в админ панели wp js скрипты работали в плагинах элементора их нужжно подключать отдельно!
   less переменные для цветов
   переменные (less или php (??)) для шрифтов по селекторам 
      для всех h1 один шрифт на всём сайте
      для всех h2 один шрифт на всём сайте
      и т.д.
   футер к низу экрана flex   https://youtu.be/kNGYuTelE3E
   минимальная ширина поддерживаемого экрана 320px !!!

   динамический адаптив т.е. перенос элемента в разные блоки в зависимости от размера экрана https://github.com/FreelancerLifeStyle/dynamic_adapt
      !!! недостатки 
         размер не ограниченно растёт при при увеличении размеров экрана
         размер неадекватно меняется при масштабировании страницы
   для стилизации похожих длоков использовать модификаторы

   указывая отступы между элементами внутри блока учитывать ситуацию при которой некоторые блоки будут отсутствовать
      :not(:last-child){ }    /*как вариант*/

   отступы от текста делать отзывчивыми, будет работать только есле размер шрифта то же отзывчивый
      расчитывать в em по формуле:   размер отступа в px / font-size текста * 1 em

   адаптив картинок должен быть за счёт пропорций сторон  высота вложенной картинки с помощью  padding   padding: 0px 0px высота px / ширину px * 100%  0px

   размер шрифта делать отзывчивым с помощью примеси
      !!! недостатки 
         размер не ограниченно растёт при при увеличении размеров экрана
         размер неадекватно меняется при масштабировании страницы
   определение поддерживает ли устройство "hover" 
      @media (any-hover: hover){ 
         :hover{ }
      }

   мелкие элементы типа точек пагинации выполнять спомощью псевдокласов before и after

   для скрытия элементов страницы меню и др !!
      transform: scale();   
      visbility: ;

   pointer-events: none;  // делает указанный элемент прозрачным для курсора и ещё кучу всего для SVG 

   @supports(){}   /*медеа запрос*/

   :not(:last-child){ }     // всё кроме селектора указанного в скобках

   что бы flex элемент не растягивались на весь экран задать ему aligh-self: center;

   Примитивные фигуры
      + 
         &:before,
         &:after {
            content: '';
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            background-color: black;
         }

         &:before {
            width: 50%;
            height: 1px;
         }

         &:after {
            width: 1px;
            height: 50%;
         }
      х
         тоже что и плюс но весь элемент повернуть на 45 град
         .elem{
            transform: rotate(45deg);
         }

   Выравнивание
      по вертикали:
         top: 50%;
         transform: translate(0, -50%);

      по  центру родителя  -- проверить
         position: absolute;
         left: 50%;
         top: 50%;
         transform: translate(-50%, -50%)

   UI-компоненты
      тег <details>  https://youtu.be/VFNGjDNBaMY



----------------------- ТЕОРИЯ start -----------------------  

Основные постулаты которые позволят делать резиновую вёрстку быстро, качественно и надёжно:
   Как можно больше использовать проценты.
   Как можно больше использовать формулы автоматического рассчёта размеров.
   Как можно больше использовать коэффициенты.
   Как можно больше использовать grid.
   Искать способы написания меньшего количества стилей, для того, чтобы переложить работу для рассчёта размеров на браузер.
   Для корректного отображения всех изображений использовать cover или contain.

Критерии качества вёрстки
   соответствие макету
   соответствие техзаданию
   надёжность - кросбраузерность       см в отдельном файле
      устайчивость и адекватность сайта в
         разнообразных браузерах и устройствах отображения
         системах управления контента
         разнообразным форматам и размерами контента
   удобство 
      юзабилити зона ответственности дизайнера(?)
      адекватность анимации
      удобстов в адаптивной версии
   скорость
      оптимизация 
      минимизация
      оптимальная последовательность загрузки элементов сайта
   семантика
      соответствие требованиям поисковых роботов
   доступность
      для пользователей с ограниченными возможностями

Способы организации стилей    нужно комбенировать!!
   Модульнаяя система
      БЭМ
   По назначению
      для всех проэктов
         нормализация стилей  normalize.css
            нормализация стилей устанавливаемых браузерами по умолчанию
         нормализация CSS     reset.css
            сброс правил оформления стандартных элементов
      для нескольких страниц одного проэкта  
         основных блоков (основные обёртки, контейнеры, .col .row) 
            в файле basse.css
               шрифты
               стили шрифтов 
               цвета фонов 
                  для эмитации переменных можно сделать отдельными классами
               стили заголовков
               стили отдельных тегов
         мелких сквозных блоков (кнопки, блоки иконок, менюшки)
      для конкретных элементов конкретной страницы (header, footer, aside)

Категории контента      https://html5book.ru/kontentnaya-model-html5/      https://developer.mozilla.org/ru/docs/Web/HTML/Content_categories

Правила вложенности тегов
   в соответствии с категориями контента 
      каждый тег пренадлежит к одной или нескольким(?) категориям
      для каждой категории прописано      https://developer.mozilla.org/ru/docs/Web/HTML/Element/strong
         какую категорию можно влаживать 
         в какую можно влаживать
   проверка правельност вложенности валидаторы     https://validator.w3.org/#validate_by_upload

Обёртки
   Смысловая, семантическая
      <artical>
      <section>
   Стилистическая, структурная
      <div>
      <span>

Иерархия заголовков
   предназначенна для смыслового структурирования содержимого страницы
      <h1>  главная мысль страницы
         <artical> <header> <h2>  обязательно должен быть есле дальше есть h3 перескакивать нельзя </h2> </header>
            <section> <h3> </h3>
               <p></p>
               <p></p>
            </section>
            <footer>
               <a> иконка на соц сеть 1 </a>
               <a> иконка на соц сеть 2 </a>
               <a> иконка на соц сеть 3 </a>
            </footer>
         </artical>
      </h1>

Селекторы
   Приоритет селекторов
      чем меньше выборка по селектору тем выше приоритет
         селектор тега 1 бал
         селектор класа 10 балов
         псевдо класы и псевдо элементы 10 балов
         селектор id  100 балов
         inline стили 1000 балов
         !important 10000 балов
         !! группировка не увиличевает колличество баллов
   ID элемента 
      Назначение  - уникализация элемента страниоцы 
      использование
         к адресу страниоцы добавить #id_element страница прокрутится к элементу
   Тег использовать не желательно т.к. при внесении правок вёрстка сламается
   Класс обеспечивает максимальную гибкость
   БЭМ

Выравнивание
   Cтрачно-блочные элементы   display: inline-block;
      только три режима по левому, краю по правому, краю по центру.
      горизонтальное    text-align:   ;
      вертикальное      vertical-align: ;
   Флекс блоки      display: flex;

Блочная модель
   см. картинку!
   Строчные элементы    display: inline;     ФРАЗОВЫЙ КОНТЬЕНТ
      :before :after то же строчные
      размеры по контенту width и height игнорируются
      отступы 
         горизонтальные работают
            !! перенос строки из HTML разметки отображается как один продел !!
               обнулить размер шрифта для родителя 
                  font-size:0;   (+!)
               венрнуть размер шрифта для потомков 
                  font-size: 16px;   (+!)
         вертикальные  не работают   
            вертекальные отступы можно задавать высотой строки
            сделано для того что бы строчные элементы не выпадали из текста и не ломали его
            позиционируются по середине строки
            ! есть междустрочный интервал
   Блочные элементы     display: block;      ОСНОВНОЙ ПОТОК
      реальные размеры задаються в css
         box-sizing
            default:
               реальная ширина блока равна width + margin-left + margin-right + padding-left + padding-right + border-left + border-right
            border-box:
               реальная ширина блока равна width 
               но растояние между соседними элементами с лева и с права будет равно  width + margin-left + margin-right 
      вертикальные margin 
         не сумируется, выбирается больший 
         !! крайние вертикальные т.е. первого и последнего ребёнка
            вылезают за пределы контейнера т.е. отталкивают родителя от его соседей
               решение
                  прозрачный бордер родителю
                  padding-top: 1px; родителю
                  overlow: hidden
   Строчно-блочные элементы   display: inline-block;
      реальные размеры задаються в css 
         box-sizing
            default:
               реальная ширина блока равна   width + margin-left + margin-right + padding-left + padding-right + border-left + border-right
            border-box:
               реальная ширина блока равна   width + margin-left + margin-right
      горизонтальные отступы работают
         !! перенос строки из HTML разметки отображается как один продел !!
            обнулить размер шрифта для нужного блока
               font-size:0;   (+!)         
      вертекальные отступы работают 
      вертикальные margin сумируются
      вертекальные отступы можно задавать высотой строки
      позиционируются по середине строки
      ! есть междустрочный интервал

Адаптивность
   Два подхода 
      ореинтир на стандартные размеры экранов
      ореинтир на требование макета
   Обязательно:
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
   проценты
      контейнер
         min-width   не меньше указаного значения
         max-width   не больше указаного значения     
      внутрение элементы 
         ширину нельзя задавать в пикселях
            что бы совместить с фиксироваными отступами:
               width: calc(100% / кол-во_элементов_в_ряд - margin_элемента * 2 px);
      отступы
         горизонтальные padding в процентах от ширины родителя который в свою очередь зависит от ширины экрана
            применяется для картинок которые пропорционально изменяются не меняя своего позиционирования
   относительно шрифта
      rem 
         множитель размера шрифта относительноо тега html
            html{
               font-size: 10px;  
            }
         суть в том что при изменении размера шрифта, например в медиа запросе 
         изменится все размеры заданные в rem

Переменные
   область видимости
   объявление
      начале файла
         :root{      /*глобальная область видимости т.е. во всех файлах подключённых ниже*/
            --var_1_name: var_1_value; 
            --var_2_name: var_2_value; 
         }
         в людом селекторе ???
      
   обращение
      свойство: var(--var_1_name);
      свойство: calc(var(--var_1_name) * var(--var_2_name));
   изменение 
         селектор{      /*измениться только(!) в нужном селекторе*/
            --var_1_name: var_1_new_value;
         }
         @media screen and (max-width: 400px){     /*измениться только(!) для данного брейкпоинта*/
            :root{
               --var_1_name: var_1_new_2_value;
            }
         }

Сетки
   простая пороизвольная
      для поулучения сетки контейнеру добавить класс row а ячейкам класс col
      ширина ячеек в ряду 
         определяется формулой width: calc(100% / кол-во_ячеек_в_ряду - горизонт_margin_ячейки * 2)
         назначается непосредственно ячейкам в зависимости от ширины экрана (медиа запросы, брекпоинты)
      .row{    /*контейнер*/
         margin: 0 -10px;
         font-size: 0;     /*удалить пробел */
      }
      .col{    /*карточки*/
         font-size: 16px;    
         box-sizing: border-box;
         display: inline-block;
         vertical-aligne: top;
         margin: 0 10px;
      }
   на 12 колонок
      12 потому что кратно 1, 2, 3, 4, 6, 12 
      т.е. для изменения размера ячейки нужно выбрать количество колонок которые она будет занимать
      формула
         width: calc(100% / кол-во_ячеек_в_ряду * кол-во_занимаемых_ячеек - горизонт_margin_ячейки * 2)
            кол-во_ячеек_в_ряду всегда равна 12
      Smart Grid        https://www.npmjs.com/package/smart-grid     автор библиотеки Д. Лаврик
   js библеотека (nod-modul) для генерации препроцессорной сетки для flexbox по заданным настройкам ввиде json объекта 
   Алгоритм использования
      используется только вместе с GULP или webpack
      Smart Grid генерирует примеси для LESS, SCSS, SASS или Stylus. 
      примеси используются для быстрого написания кода 
      результат собирается GULP через: group-css-media-queries autoprefixer clean-css
   установка
      npm i smart-grid -D       // 213 загрузок за неделю!
   использование  см в конспекте по GULP 
      smartgrid.js      // работает как модуль js 
         module.exports = {
            columns: 24,
            offset: "10px",      // растояние между колонками
            container: {         // внешеий контейнер сайта
               maxWidth: "950px",
               fields: "30px"    // поля сайта
            },
            breakPoints: {
               md: {
                  width: "900px",
                  fields: "15px"
               },
               sm: {
                  width: "720px"
               },
               xs: {
                  width: "576px"
               },
               xxs: {
                  width: "400px"
               }
            },
            mobileFirst: false
         }
      в main.less
         @import "smart-grid.less";

Flex 
   Поведение по умолчанию
      элементв занимают всю высоту контейнера
      если элементам не задана ширина то ширина контейнера делится поровну между всеми элементами с учётом их margins и paddings


   align-items: все значения не только выравнивает элементы 
      вдоль поперечной оси но и 
      устанавливает высоту элеметов по содержимому


   FLEX - 1

      контролируется только главная ось причём каждая из главных осей отдельно
      для всех элементов 
         margin 
            по умолчанию равен auto   т.е. заниет всё свободное пространство в т.ч. и по вертикали
            вертекальные складываются
         min-width по умолчанию равен auto
            т.е. элемент не может быть меньше контента а значиить наборы символов будут переносится только по пробелам
               исравить: 
                  word-wrap: breack-word;                                                                                                                                                                                                                                     
      width-base 
         базовый размер отличается от width только тем что  width-base измеряется вдоль основной flex оси направление которой может меняться
      width-grow - пропорция по которой элементы делят между собой только(!!) свободное пространство --  жадность
         по умолчанию равен 0 т.е. не стримится занять свободное пространство
         не влияет на переносы на другие строки
         ! для каждой строки расчитывается отдельно
         !! не может быть больше max-width
      width-shrink - коэфициент с которым элемент отдаёт своё бозовое пространство -- уступчивость  
         т.е. элементы с разным shrink будуть отдавать своё базовое пространство с разной скоростью
         !! не может быть меньше min-width
         по умолчению равно 1
         0 не уступчивость width-base превращается в аналог жостко заданому width-min
            т.е. элементы будут выходить за пределы родителя при уменшении его размера
         чем больше число тем быстрее элемент будет сжиматься


   Flex - 2
      эмуляция сеток:
         .container{
            max-widh: 1280px;
            margin: 0 auto;   /*центровка по горизонтали*/
            padding: 0 30px;
         }
         .row{
            display: flex;    /*все элементы на одной строке  по умолчанию при этом:
                                 flex-basis: auto; flax-wrap: no-wrap;
            flax-wrap: wrap;
            /*убрать пустое пространство между row и внешним краем item*/
               либо 
                  margin: 0 -(margin установленный для item)px; 
               либо
                  justify-content: space-between;
            margin: -15px;
            /*центровка блоков*/
            justify-content: center;
         }
         .item{
            padding: 50px 0px;
            text-aling: center;
            bacrgraund: #f5d781;
            /* т. к. по умолчанию box-sizing:content-box; 
                  т.е. 
                     реальная ширина элемента расчитываеться 
                     от ширины контентной части в наружу  
                        т.е. реальная ширина = ширина контентной части остаётся неизменной + padding + border + margin
               по этому для адекватной ширины элементов нужно
                  либо 
                     box-sizing: border-box; 
                     а растояния между элементами устанавливать padding-ми
                  либо:
                     расчитывать ширину:
                        width: calc((ширина одного єлемента в процентах) - (сумма левого и правого margin-ов в пикселях));
               */
            width: calc(25% -30px);    
            margin: 15px;

         }

Grid layout   
flexboxgrid

СЕМАНТИЧЕСКАЯ вёрстка
   обязательная часть SEO
   прежде всего  для правельного отображения страницы на специфических устройствах 
      на пример для слепых 
   второстепенное использование манипулирование поведением поисковых роботов

   Семантические теги      !!! https://html.spec.whatwg.org/#toc-semantics 
      Стуктурируют пространство HTML страницы по смыслу(!)
         Необходимы для SEO !!!!
         Нужны для специальных устройств
         ведут себя как обычные div
         ведут себя как обычные div
      КНОПКА vs ССЫЛКА с точки зрения семантики 
         кнопка это элемент при клике на который выполняется какое либо действие
            т.е. кнопка запускает какой либо функционал: 
               отправка данных формы, открытие модального окна, начало просчёта калькулятора, открытие меню .....
         ссылка это элемент нажатие на который переносит пользователя куда либо 
            в пределах данной страницы или за её пределами
      <header>
         шапка секции или статьи(!!!!) а не документа!!!
         обёртка для смысловых элементов 
            нужно использовать только когда есть группа вложенных смысловых элементов
      <nav>
         обёртка для 
            ключевой навигационной группы
               меню
               группа(!) ссылок 
      <aside>
         вспомогательный контент, сайд бар и прочее
      <main>
         для выделения главного на странице(!!!) 
            контент, уникальный на сайте, ради которого эта страница и создавалась
      <section>
         обёртка для логического длока данных но не статья  
         нельзя везде использовать вместо тега div
         могут быть вложенными друг в друга
      <footer>
         подвал секции или статьи(!!!!) а не документа!!!
         обёртка для смысловых элементов 
            нужно использовать только когда есть группа вложенных смысловых элементов
      <article>
         обёртка для однотипных логических блоков данных типа статья, сообшение
         должен содержать заголовок, h2 или меньше
         может содержать <header> <footer>
      <figure>
         обёртка для автономного контента малозначимого для поисковиков 
         типа картинки, видео, диаграм, 
      <figcaption>
         подписи картинок и т.д.
      <details>
         скрывает, типа спойлера, всё содержимое кроме тега <summary>
      <summary>
      <mark>
         подсвечивается браузером по умолчанию
      <time>
         используется для указания времени в 24-часовом формате и/или точной даты.
            не должен содержать посторонних элементов, не соответствующих стандарту !!
            Атрибут datetime задает машиночитаемый формат даты/времени в международном формате ISO 8601, 
            чтобы пользовательские программы-агенты могли добавлять эту информацию в системы напоминания или в расписание событий пользователя.
      <dl> 
         от англ. Description List список описаний. Служит контейнером для списка пар терминов (определяемых элементом <dt> ) и их описаний (определяемых элементами <dd> )
            <dt> заголовок
            <dd> описание
      <cite>  
         (от англ. Citation) При помощи тега <cite> размечают названия художественных произведений, телевизионных передач, веб-сайтов и т.д. 
            Текст внутри <cite> автоматически выделяется курсивом. 
            не путать с атребутом тега <blockquote cite="http://developer.mozilla.org">
      <blockquote> 
         элемент цитаты указывает на то, что заключённый в нем текст является развёрнутой цитатой
            URI на источник цитаты можно указать в атрибуте cite, тогда как текстовое представление источника может быть задано элементом
      <strong>
         выделяет текст 
         и указывает на важность(!) выделенного элемента 
            т.е. серьёзность, срочность, опасность
      <address>
      <fieldset>
         визуально группирует логически связанные между собой элементы формы, которая определяется HTML тегом <form>. 
         В браузере по умолчанию содержимое тега выделяется рамкой и имеет внутренние отступы со всех сторон

      <legend>
         задает заголовок элементам формы, сгруппированных тегом <fieldset>. 
         Группа элементов формы в браузере выделяются рамкой, а содержимое тега <legend> вставляется в эту рамку

   НЕ семантические теги
      в дизайне могут отсутствовать но для семантики необходимы!
      поэтому в разметке присутствуют, но пользователю не видны так как срыты правильным(!) способом     https://allyjs.io/tutorials/hiding-elements.html   
      <label>
         необходимы для элементов тега <form>
         c обязательной привязкой к элемнту по id https://youtu.be/W8GQwK90IDM?si=fa390qwkGvAy7AJ3    1:24:34
      <a>
         в атребуте href указывать:
            tel: 
            mailto:
      <button>
         используется для создания интерактивных кнопок на веб-странице


      <b> 
         просто выделяет текст т.е. текст который в макете выделен жирным

Еденицы измерения
      абсолютные
         пиксель
            базовая еденица - все остальные значения перещитываются браузером в пиксель
               допускаются дробные  числа

      относительные
         em - относительно текущего, заданного или унаследованого(!), размера шрифта
            1 em равен значению font-size
            формула пересчёта в пиксели 
               пусть задано width: 1.5em;
               ширина в пикселях будет = 1.5 * текущий font-size 
            наследуется потомками
            допускаются дробные числа
         rem - относительно размера шрифта тега html а если он не задан то браузера по умолчанию 16 px
            допускаются дробные числа
         проценты - в разных случаях проценты берутся от разных велечин!!! Уточнять в каждом отдельном случае!!
         вьюпорт  
            vw - ширины 100vw равно ширене вьюпорта
            vh - высоты 100vw равно высоте вьюпорта
            vmin - наименьшеого из значений между vmin или vmax   100vmin  по аналогии
            vmax - наименьшеого из значений между vmin или vmax   100vmax  по аналогии
         Проценты 
            width - относительно ширины родителя
            height - относительно высоты родителя 
               НО только если высота родителя задана явно
               ЛИБО это flex или grid элемент
            position relative теже условия что и при hight 
            position absolute теже условия что и при hight но относительно первого родителя с position relative 
               НО самому родителю задавать высоту необезательно
            padding and margin - относительно ширины родительского элемента 
               ДАЖЕ вертикальные отступы
            transform: translate() - относительно высоты / ширины самого элемента к которому применяется это свойство
            font-size and line-hight - относительно унаследованого свойства font-size
      Формулы конвертации
         EM = PX / font-size данного элемента
         REM = PX / font-size 
         % = PX / х * 100  где х - число относительно которого расчитывается процент

currentColor 
   ключевое слово CSS 
      работает как переменная для текущего значения свойства color элемента
         если у элемента не определено свойство color, значение currentColor будет определяться по каскаду(!!!).
      представляет вычисленное значение свойства color у конкретного элемента. 
         Оно позволяет сделать так, чтобы свойства цвета были унаследованы другими свойствами цвета 
         или свойствами дочернего элемента, который не унаследовал данное свойство по умолчанию.

SVG
   Заменить в теге <svg ...> параметр fill="none" на fill="currentColor" и удалить fill="" из всех тегов path 
      при этом значение fill будет наследоватся от значения color родительского элемента
   При использовании команды повторного вызова use, элемент svg попадает в теневой дом (shadow DOM) 
         и становится недоступным для управления из внешней таблицы стилей.
      Для устранения этого применяется принудительное наследование свойств :
         svg path 
         {
         fill:inherit;
         stroke:inherit;
         }     
         далее уже можно применять правила css для закраски патчей и строк.

      Обратите внимание, что вызов элементов svg командой use используется через #id, поэтому необходимо заменить классы на уникальные идентификаторы.

   При использовании use содержимое будет в Shadow DOM, он изолирован и изменить стили определенного узла из вне нельзя.
      - Можно изменять цвет, толщину границы, размеры но для всей иконки в целом.
      - С помощью currentColor можно задать сразу 2 цвета.
      - Если браузер умеет в CSS переменные, то можно красить иконки как хочешь.
      - В будущем возможно будет псевдо-селектор ::shadow, который позволит влезать в Shadow DOM, но это не точно.
   
   пропишите это в вашем файле reset-normalize-defaults.css       https://webformyself.com/delaem-css-koroche-s-pomoshhyu-currentcolor/
      svg
      {
         fill: currentColor;
      }
   теперь вам вообще не нужно стилизовать SVG и каждый раз прописывать свойство border-color
   
z-index 
   порядок наложения Stacking Order это правила которые пременяются при наложении блоков 
      порядок наложения вне контекста наложения (контекст наложение создаёт корневой блок - блок основатель контекста!! первым корневым блоком есть тег html)
         элементы с position: static;
            наложение происходит в порядке следования в потоке документа
               более позние блоки будут накладыватся на более ранние 
                  например при использвании отрицательных маржинов
         элементы с position: relative; или с position: absolut; без z-index(!) т.е. с z-index: auto;
            будут отрисовываться выше статических 
               т.е. указав блоку position: relative; и не указывая z-index, z-index по умолчанию установлен в auto; 
               мы подымим его над остальными статическими блоками
         элементы с position: relative; или с position: absolut; с z-index отличным от auto

      порядок наложения внутри контекста
         корневой блок - это блок основатель контекста!!
         спозиционированные блоки с отрицательным z-index 
            (position != static; z-index < 0 )
         неспозиционированные блоки
            (positio: static;)
         спозиционированные блоки с z-index по умолчанию
            (position != static; z-index: auto; )
         спозиционированные блоки z-index >= 0
            (position != static; z-index >= 0; )

   Stacking Context это ограничение зоны сравнение z-index вложенных элементов 
      при этом сам контекст будет сравниватся с другими контекстами на его уровне вложенности
      т.е. если у одного из соседей z-index больше 
         то все его потомки будут выще его соседей 
         вне зависимости от своих индексов
         т.е. сравнение z-index происходит по родителю
      Образование контекста:
         корневой блок документа - это блок основатель контекста!!
         блок с position: relative; или с position: absolut;   и указаным z-index отличным от auto(!)
         блок с position: fixed; или position: sticky; без указания z-index
         все блоки вложенные в flex или grid контейнер 
         scc свойства получив которые блок создают контекст:
            opacity < 1
            transform
            filter
            perspective
            clip-path
            mask




----------------------- ТЕОРИЯ end ------------------------- 


----------------------- Практика start ---------------------
Типичная структура страницы
      <h1>  главная мысль страницы
         <artical> 
            <header> 
               <h2>  обязательно должен быть есле дальше есть h3 перескакивать нельзя </h2> 
            </header>
            <section> <h3> </h3>
               <p></p>
               <p></p>
            </section>
            <footer>
               <a> иконка на соц сеть 1 </a>
               <a> иконка на соц сеть 2 </a>
               <a> иконка на соц сеть 3 </a>
            </footer>
         </artical>
      </h1>

Теги
   <head> - настройки валедации страницы
   <header> - семантический тег,  видимое содержимое части страницы 

Алгоритм вёрстки
   normalize.css подключить
      изучить макет и выделить 
         одинаковые компоненты - мелкие блоки
         базовые, основные стили занести в less переменные:  
            шрифты
               размеры
               цвета
            отступы
               paddings
               margins
            фоны, обводки
               основных блоков
      щрифты
         скачать и переконвертировать 
         сгенерировать файл стилей для шрифтов
      иконки 
         простые:
            нарезать из макета в формате svg 
            собрать спрайт
         контентные:
            те которые будут менятся из админки CMS ????
      Построение сетки
         Ширина холста - максимальная ширина макета занимает всё пространство вьюпорта любого устройства
         Ширина ограничюющего контейнера - ширина контентной части
         Внешние поля - отступы предотвращающие прилипание контента к границам вьюпорта при его уменщении
         стандартные, основные, брекпоинты
         кол-во колонок 
         offset: межколоночное растояние





      для каждого горизонтального экрана нужно задать
         контейнер
         строку 
         стобцы
         установить способ центровки элементов

РАЗМЕРЫ     подробнее    https://fls.guru/css-units.html  
   нужные миксины: https://youtu.be/oJuVegSheQs?si=I-qxfI6AzVuxWI6A  37:58
   Шрифты
      указать основной размер шрифта для тега body в REM 
         НЕ для тега html т.к. шрифт для тега html устрновливает браузер в зависимости от устройства
   Размеры которые не должны менятся на разных устройствах задавать в PX 
      ограничивающий контейнер 
         вертикальные отступы  
         отступы безопастности по бокам
   Размеры которые должны изменятся на разных устройствах задавать в PX 
      ширина основного контейнера указывается в REM 
      минимальная ширина карточек - min-width: в REM
   Размеры которые должны изменятся в зависимости от родителя
      width - просто в процентах:
         ширину элемента в PX / ширину родителя в PX * 100%
      flex-basis для всех флекс элементов вместо ширины
         flex: 0 0 w;   // где ц - ширина по макету 
      hight - т.к. проценты расчитываются от высоты радителя 
         а при адаптации ширина элемета должна быть привязана к ширине(!!) 
         то нужно использовать padding-top(!!) в процентах по формуле:
            padding-top: высота элемента в PX / ширину родителя в PX * 100;
      font-size - указывать в REM
      line-hight - в процентах
      letter-spacing - в EM
   Позиционирование
      по центру родителя
         position: absolute;
         top: 50%;
         left: 50%;
         transform: translate(-50%, -50%);
   Для медиа запросов лучше использовать EM  подробнее:  https://zellwk.com/blog/media-query-units/
         
Центровка горизонтальных блоков для того что бы фоны блоков не ограничивались по ширине
   простой способ
      внутри каждого семантического блока 
      создать дополнительную обёртку с одинакавым классом
         для которого
            max-width: 1280px:
            margin: 0 auto;
      ширину семантического блока при этом не указывать
   сложный способ
      каждому семантическому блоку
         padding: 10px calc(50% - 0.5*желаемой_шириы) 
   приэтом !
      для прилипания внутрених элементов, карточек, к границам центрующего контейнера 
      нужно компенсировать margin только крайних карточек
         для карточки помещают в ещё одну обёртку которой нужно задать отрецательный горизонтальный margin

Простые геометрические фигуры    https://youtu.be/Irj55RYH254

Картинки
   т.к. картинки это строчно блочный элемент то по умолчанию картинки всегда будут стримится занять свой физический размер т.е. будут выходить за пределы родителя
   для устронения этого по умолчанию для всех картинок
         img{
            max-width: 100%;   // для того что бы картинки не выходили за пределы родителя
            height: auto;     // для того что бы сохранить пропорции картинки 
         }

Фоновое изображение блока
   1. С помощью псевдо элемента :before          https://css-live.ru/articles/adaptiruyushhiesya-kartinki-zastavki-na-css.html    https://codepen.io/necolas/pen/ngEdpa

Блоки с заданным соотношением сторон высота вложенной картинки с помощью  padding   !!!!!!!!!!        https://css-live.ru/articles/adaptiruyushhiesya-kartinki-zastavki-na-css.html
   по сути таким способом задаётся соотношение сторон сложенного блока
      результатом padding-а в 25% будет пропорция 4:1, padding в 33.333% в 3:1 соответственно, и т.д.
         padding: 0px 0px нужная высота картинки в px / ширина карточки в px * 100% 0px;
   подробнее:
      если для блочного элемента не задано явно значение свойства height, то высота элемента будет автоматически рассчитана на основе его содержимого. 
         при этом, если для элемента заданы значения свойств padding-top или padding-bottom, то они будут увеличивать высоту элемента.
      суть в том, что процентное значение свойств padding-top или padding-bottom берётся от ширины родителя. 
         таким образом, если установить для элемента, например абсолютно позиционированной картинки,  значение padding-bottom: 50%, 
         то это означает, что его нижний внутренний отступ будет равен 50% ширины его родителя.
         а т.к. высота элемента определяется как сумма его содержимого и внутреннего отступа, 
         высота элемента также будет равна 150% его ширины (100% ширины(?!) + 50% отступа). 
         a поскольку высота элемента не указана явно, она будет автоматически рассчитана браузером на основе его содержимого и внутреннего отступа.
      т.е. если вы установите значение padding-top: 50% для элемента, то это приведет к тому, что его верхний внутренний отступ будет равен 50% его ширины, 
         а высота элемента также будет равна 150% его ширины.

карзина товаров с анимацией      https://youtu.be/3z7TRd7tzhE     3:27:25

Трансформация поворот движение
   transform: ;

Обрезка div по сложным кривым
   css свойство mask-img:
   псевдо элементом 
      который будет иметь в себе картинку нужной формы и фонового цвета 
      накладываться на родительский div
      создавать илюзию что родительский div имеет край обюрезаный по заданной кривой 

----------------------- Практика end -----------------------



----------------------- Проблемы -- решения start ---------

----------------------- Проблемы -- решения end -----------








----------------------- ЧЕРНОВИК -----------------------








