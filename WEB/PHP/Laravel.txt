Источники:
   ++ https://www.internet-technologies.ru/articles/ruk-po-laravel-8-kak-sozdat-pervoe-prilozhenie.html
   https://laravel.su/docs/5.0/installation
   https://habr.com/ru/post/439200/

смежные области:
   ООП в PHP -- в отдельном файле
   MySQL
   Терминал 
   Упровление зависимостями
      Composer
         Описание
            это менеджер зависимостей для PHP
               т.е. менеджер для подключения и управления сторонними библиотеками или пакетами в PHP-проекте
               без PHP использование composer не имеет смысла
               только консольный
         Основные задачи:
            автоматизация рутинных операций при установке PHP
               настройки
               автозагрузку компонентов
               обновление библиотек
                  при чём
                     одна библиотека может требовать для своей работы другую, другая третью и.т.д.
                        В итоге, может получаться ряд зависимостей, которые вы должны подключать.
               перенос проекта на рабочий сервер при большом объеме библиотек
               и.т.д.
            для решения этих проблем:
               в composer есть файл настроек composer.json
                  в котором прописывается всё необходемое 
                  Composer автоматически приходит в указанное состояние
         Установка
            глобально
               скачать и установить Composer 
               поместите путь к папке ~ / .composer / vendor / bin в переменную среды PATH
                  Система -> Дополнительные параметры системы -> Дополнительно -> Переменные среды -> переменная path
                  перезапустить комп
               добавить в переменную окружения path путь к composer.bat
               дополнительно можно добавить в path \Users\%userName%\AppData\Roaming\Composer\vendor\bin\ 
            локально
               Т.к. программа глобально не установлена, нужен загрузочный файл(мини-программа composer)
               для его загрузки пишем команду:
                  php -r «readfile('https://getcomposer.org/installer');» | php
               теперь в директории проекта появился файл composer.phar
               Всё, можно использовать.
                  php composer.phar require [название пакета]
            Отличия глобальной и локальной установки
               Команды запускаются по разному при локальной и глобальной установках:
                  Например:
                     Локально: php composer.phar require silex/silex ~1.1
                     Глобально: composer require silex/silex ~1.1
               При локальной установке нужно каждый раз скачивать установочный файл в папку текущего проекта
                  php -r «readfile('https://getcomposer.org/installer');» | php
               При глобальной установке этот файл не нужен. Composer запускается при любой текущей директории.
         Команды
            install — установка пакетов, прописанных в composer.json
            update – обновление пакетов
            dumpautoload — пересборка автозагрузчика
            require somepackage/somepackage:someversion — добавление нового пакета (по умолчанию пакеты ставятся из оф. репозитория). При установке пакет прописывается в composer.json
            update --lock — обновление файла блокировки composer.lock
            config --global cache-files-maxsize «2048MiB» — пример изменения параметра конфигурации
            --profile — добавление этого параметра к любой команде включит показ времени выполнения и объёма использованной памяти
            --verbose — подробная инфомация о выполняемой операции
            show --installed — список установленных пакетов с описанием каждого
            show --platform — сведения о PHP
            --dry-run — репетиция выполнения команды. Может добавляться к командам install и update. Эмулирует выполнение команды без её непосредственного выполнения. Необходим для того, чтобы проверить пройдёт ли установка пакетов и зависимостей успешно.
            remove — удаление пакета. Точная противоположность require
         Синтаксис composer.json

----------------------- ТЕОРИЯ start -----------------------  

   Laravel это 
      бесплатный PHP-фреймворк
      на основе архитектурной модели Model View Controller (MVC).
         Model-View-Controller (MVC, «Модель-Представление-Контроллер» или «Модель-Вид-Контроллер»)
            схема разделения данных приложения и управляющей логики 
            на три отдельных компонента 
               таким образом, что модификация каждого компонента 
               может осуществляться независимо
               модель (Model)
                  предоставляет данные и методы работы с ними: запросы в базу данных, проверка на корректность. 
                  реагирует на команды контроллера, изменяя своё состояние
                  не зависит от представления
               представление (View)
                  отвечает 
                     за отображение данных модели пользователю, 
                     не обрабатывает введённые данные пользователя
                     реагируя на изменения модели
               контроллер (Controller)
                  обеспечивает «связь» между пользователем и системой
                     контролирует и направляет данные от пользователя к системе и наоборот
                     т.е. интерпретирует действия пользователя, оповещая модель о необходимости изменений
            Назначение
               Основная цель этой концепции:
                  отделение бизнес-логики (модели) от её визуализации (представления, вида)
                  за счёт такого разделения повышается возможность повторного использования кода
               Наиболее полезно применение данной концепции в тех случаях, 
                  когда пользователь должен видеть одни и те же данные одновременно 
                     в различных контекстах 
                     и/или с различных точек зрения
                  к одной модели можно присоединить несколько видов
                     при этом не затрагивая реализацию модели
                        Пример
                           данные могут быть представлены одновременно  в виде 
                              электронной таблицы
                              гистограммы 
                              круговой диаграммы
                           не затрагивая реализацию видов, можно изменить 
                              реакции на действия пользователя 
                                 для этого достаточно использовать другой контроллер                        
                           разработчики специализируется только в одной из областей: 
                              разрабатывают графический интерфейс
                              разрабатывают бизнес-логику (модели)

   Установка
      установливается на веб-сервер
      выполнить следующую команду
         composer global require “laravel/installer”
   Создать проект 
      перейти в нужную папку
      выполнить команду 
         laravel new projectname
      настроить базу донных
         SQLite предустановлена в Laravel
         любые другие:
            предворительно установить в системе
         Laravel позволяет файлу config/database.php настраивать базу данных, 
            но лучше не хранить в нем учетные данные. 
         файл .env
            который по умолчанию находится в корневой папке Laravel
            в нём можно хранить различные типы учетных и других данных.
      создать аутентификацию
         Laravel Jetstream
            это скелет» для аутентификации
               всё, связанное с аутентификацией: вход пользователя, регистрация, потеря пароля, двухфакторная аутентификация и т.д. 
               будет создаваться заранее, если вам это необходимо.  
            при создании проэкта:
               laravel new todo --jet
            добавить в существующий проэкт:
               установить пакет Jetstream
                  composer require laravel/jetstream
               выбрать стек: Liveware или Inerta ???????
                  для livewire
                     php artisan jetstream:install livewire
               запустите 
                  «npm install && npm run dev»
   Миграции
      описание 
         это набор функций для контроля версии базы данных приложения при их использовании разными програмистами
            используются, чтобы создавать, изменять, а также делиться схемой(!!!) базы данных приложения
            используются с конструктором схем Laravel, чтобы упростить создание схемы базы данных. 
         миграция это функция, по сути обычные классы, 
            описывающие действия по созданию или изменению 
            архитектуры базы данных данной версии
         миграция не отвечают за данные в таблицах
         пример
            выполнить команду 
               php artisan make:migration create_tasks_table --create=tasks
            найти только что созданную миграцию в папке /database/migrations
            создания схемы базы данны
               public function up()
                  {
                     Schema::create('tasks', function (Blueprint $table) {
                     $table->bigIncrements('id');
                     $table->string('description');
                     $table->integer('user_id')->unsigned()->index();
                     $table->timestamps();
                     });
                  }
            Команда migrate обновит изменения, внесенные в схему, в базе данных.
               php artisan migrate
      преимущества 
         легко перестроить структуру базы данных, используя файлы миграции в любой системе
      состоит из
         метод создания или изменения 
            конструктор структур
               класс Schema::
         метод отката
            конструктор структур
               класс Schema::         
         оба метода разрабатываются паралельно!!!
      в базе данных есть специальная таблиц которая хранит историю изменения базы данных
         в ней хранится название файла миграции и на каком цыкле выполнялась
   Модели - Eloquent
      Eloquent – это ORM (система объектно-реляционного отображения) для Laravel, 
         которая позволяет свободно применять active-record для работы с базой данных. 
         Каждая таблица базы данных может иметь соответствующую модель Eloquent. 
      Модель Eloquent представляет объекты базы данных. 
         Она может использоваться для 
            запроса данных в таблице
            вставки данных в таблице
            обновления данных в таблице
      Создать модель
         php artisan make:model Task
         Эта команда создаст модель (файл??) задачи в папке приложения, как показано ниже.
      Отношение «один-ко-многим»
         Отношения используются для соединения таблиц. 
         Eloquent даёт возможность связать свои модели через отношения Eloquent. 
         Отношение «один ко многим» означает, 
            что одна модель владеет несколькими объемами другой модели. 
            т.е. у одного пользователя может быть много задач, 
            поэтому между таблицей пользователей и таблицей задач существует связь «один ко многим». 
         Eloquent свяжет модели между собой, поэтому вам придется использовать только функции.
         Пример 
            Модель задачи (файл task.php находится в app/task.php):
               ...
               use App\Models\User;
               class Task extends Model
               {    
                  public function user()
                  {
                     return $this->belongsTo(User::class);
                  }
               }
            Модель пользователя (файл user.php находится в app/user.php):
               ...
               use App\Models\Task;
               class User extends Authenticatable
               {
                  ...
                  public function tasks()
                  {
                     return $this->hasMany(Task::class);
                  }
               }
   Интерфейс командной строки Artisan
      содержит различные команды:
         Tinker позволяет взаимодействовать со всем вашим Laravel - приложением 
            через окно консоли без необходимости доступа к веб-интерфейсу. 
            Основным преимуществом Tinker является то, что вы можете 
               тестировать отношения, 
               отлаживать данные и 
               получать доступ к 
                  Eloquent ORM, 
                  задачам, 
                  тестам, 
                  событиям 
                  и т. д. 
            Пример
               вы зарегистрировались в приложении и создали две задачи. 
               Теперь вы проверяете эти задачи прямо в окне консоли:
                  $ php artisan tinker
                  >App\User::first()->tasks;
               Tinker напрямую обращается к базе данных
   Контроллеры
      Контроллеры используются для распределения трафика между представлениями и моделями. 
         Они могут сгруппировать несколько логических схем обработки запросов в один класс. 
         Таким образом, как правило, они получают весь запрос и, исходя из своей логики, 
         перенаправляют или возвращают соответствующие данные. 
      Создать контроллер
         php artisan make:controller TasksController
         будет создан TasksController, 
         который вы сможете найти в папке app / Http / Controllers
   Маршрутизация
      Маршрутизация означает принятие запроса и его перенаправление к соответствующей функции. 
      Примеры стандартных маршрутов
         Авторизоваться;
         Зарегистрироваться;
         Показать список всех наших задач;
         Добавить новые задачи;
         Удалить существующие задачи.
      Laravel Jetstream добавляет вход и регистрацию, поэтому теперь нам нужно позаботиться только о трех маршрутах.
      Laravel предоставляет различные файлы маршрутов внутри папки / routes 
         Например
            настройка маршрутизации для API будет находиться в файле «/routes/api.php»
            настройка маршрутизации для нашего веб-приложения будет находиться в «/routes/web.php».
   Представления – шаблоны Blade
      Представления - это интерфейс Laravel- приложения
         который разделяет логику приложения и логику представления
      Представления хранятся в папке resources/views. 
      Laravel включает в себя довольно удобный макет, который содержит панель навигации под названием app.blade.php, 
         расположенную в папке Views / layouts. 
      С помощью механизма Blade в Laravel вы cможете 
         разделить свои страницы на подсекции, 
         использовать раздел панели навигации по умолчанию в новых представлениях.
      Пример
         в папке / resources / views 
            создайте файлы add.blade.php и edit.blade.php 
            с разметкой, приведенной ниже.
               <x-app-layout>
                  <x-slot name="header">
                     <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                           //здесь должен быть header вашей страницы
                     </h2>
                  </x-slot>
                  //здесь должно быть содержимое тэга body
               </x-app-layout>
            В файле dashboard.blade.php также замените весь код на тот, 
            который приведен выше. 
   Привязка модели к маршруту (Route-Model Binding)
      Это механизм для внедрения экземпляра модели в маршруты. 
      Это значит что 
         вы можете передавать объект модели 
            в маршруты
            в представления по маршрутам
      Эта функция поможет вам легко получить значения объекта в представлении
   Запуск проекта на Localhost
      перейти в корень вашего приложения в терминале
      запустите в окне терминала команду 
         php artisan serve 





----------------------- ТЕОРИЯ end -----------------------  