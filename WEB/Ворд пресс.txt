
Источники:
	+++https://www.youtube.com/c/%D0%91%D1%8B%D1%82%D1%8C%D0%9F%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%81%D1%82%D0%BE%D0%BC/playlists

Термины:
	спецификация
		часть имени файла от тире до точки
		уточняет логическое значение файла
	id имя файла или часть имени файла если в имени файла есть спецификация
	префикс
		часть имени функции от начала до тире	нужен для того чтобы избежать задваивания названий в разных темах плагинах и т.п.



Генератор файловой структуры	https://underscores.me/



Смежные области:



----------------------- ТЕОРИЯ start -----------------------
страницы и посты а также любые другие типы записей 
	это всего лиш записи в таблице posts базы данных
	тело поста формировать в отдельном файле с префиксом single-.....php
цикл WP --> глобальный запрос
	по умолчанию формирует глобальный запрос в базу данных 
		инфармацию выдаёт каждому типу страниц разную на основании зароса от get_header();
			для главной страницы это все посты
			для single.php один пост
	т.е. перед цыклом должена быть get_header(); 
	если в настройках "Чтение" указать главной страницей "Ваши последние записи"
		при выводе постов на странице index.php
			тело поста формировать частями которые будут находится в отдельных файлах
				content.php
					в котором:
						<article <?php post_closs();?> id="post-<?php the_id();?>" data-post-id="<?php the_id();?>" >
							вёрстка с использованием:
								the_title();
								the_content();
								the_permalink();
								get_post_meta();
								и т.д.
						</article>
			в самом index.php
				<?php get_template_part('путь к файлу / имя файла без разширения', 'спецификация имени файла') ?>
	если в настройках "Чтение" указать главной страницей "Статическая страница"
		главный цыкл WP будет вывыдить только один пост
		для того что бы получить все посты нужно использовать класс WP_Query{}
		который выводит любую инфу в любом месте сайта



----------------------- ТЕОРИЯ end ------------------------- 


----------------------- Практика start ---------------------

Хранить на Github		https://qna.habr.com/q/461903
	???  https://github.com/roots/bedrock
	???  https://d2c.io/ru/article/how-to/ispolzovanie-git-pri-rabote-s-wordpress-i-perenos-proekta-v-d2c
	репозиторий гита в корне вордпресса
		.gitignore
			# VS Cod
			.vscode

			# WordPress
			*.log
			/wp-*.php
			/index.php
			/xmlrpc.php
			/license.txt
			/readme.html
			/sitemap.xml
			/sitemap.xml.gz

			/backup*

			wp-admin/
			wp-includes/

			wp-content/*
			!wp-content/themes/
			wp-content/themes/*

			!wp-content/plugins/
			wp-content/plugins/*

			!wp-content/themes/ei/
			!wp-content/themes/ei-child/

			!wp-content/plugins/realty-export

			# Frontend tools
			wp-content/themes/ei-child/node_modules/
	сomposer в WordPress 		https://oddstyle.ru/wordpress-2/stati-wordpress/ispolzovanie-composer-v-wordpress-nebolshoe-rukovodstvo-dlya-novichkov.html
	управление WordPress-сайтом с помощью Git 		https://wordpressify.ru/2019/09/upravlenie-wordpress-sajtom-s-pomoshhyu-git-i-composer-chast-1-sohranyaem-wordpress-v-git/
WordPress -- Git -- Composer
	поместить WordPress в отдельную папку	https://codex.wordpress.org/%D0%A0%D0%B0%D0%B7%D0%BC%D0%B5%D1%89%D0%B0%D0%B5%D0%BC_WordPress_%D0%B2_%D0%BE%D1%82%D0%B4%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE%D0%BC_%D0%BA%D0%B0%D1%82%D0%B0%D0%BB%D0%BE%D0%B3%D0%B5
	структура проэкта		
		https://github.com/markjaquith/WordPress-Skeleton
		+- https://github.com/chrisguitarguy/wordpress-skeleton

Правила именования функций
	начинается с префикса -- имени темы
	нижнее подчёркивание 
	имя ф-циии

Отслеживание ошибок
	файл wp-config
		define(WP_DEBUG,true);

всегда добавлять в шаблон технические ф-ции:
	в файл header.php(!!!)
		wp_header() 
	на всех страницах 
		<body <?php body_class(); ?>
		<?php wp_doby_open(); ?>
	в файл footer.php(!!!)
		<?php wp_footer(); ?>		// для того чтобы скрипты подключались в футере

Подключение HTML блоков на страницу
	HTML блоков хранятся в отдельных файлах
	подключить в любое место страницы
		get_template_part() 
			Ищет и подключает указанный файл темы. 
			Похожа на PHP функцию include(), только не нужно указывать путь до темы.
			если вторым параметром передать какую то динамическую функцию 
			например get_post_type будет подгружать разные блоки в зависимости от типа поста
Подключение стилей реализовано по средствам куков 			!!! https://youtu.be/8n_M5yd60m4
	wp_enqueue_style();
	для того что бы wordpress различал стили разных тем
	в первый параметр можно добавить к имени файла стилей имя функции в качествепрефикса
		function 	my_func_enqueue_style{
			wp_enqueue_style(my_func_stule, ..... );
		} 
Подключение хедера
	в файле header.php(!!!) добавить ф-цию wp_head();
Хуки
	спосаб выполнять свои ф-ции в момент срабатывания определённого события
	обязательно устанавливать приоритет подключения
		можно разный нав среднем 100
Фильтра		https://youtu.be/8n_M5yd60m4  ~ 14 минута
Меню 		https://youtu.be/Y8EA79iGt-A
	

Безопасный вывод данных (Escaping)				https://youtu.be/HElKv_K2_48
	т.к. данные выводимые из БД магут содержать любые(!) символы
		пример
			" ' < > & и т.д.
	!!!	вообще в теме не должно быть конструкции echo $....	!!!
		т.е. глобальный поиск по файлам темы "echo $" не должен вничего находить
	любые строки выводимые в АТРИБУТ ТЕГА нужно оборачивать в esc_attr();
		echo esc_attr( $text );
	любые строки выводимые НА ЭКРАН нужно оборачивать в esc_html()
	если часть тегов в строке всё таки нужно выводить 
		wp_kses()  
			чистит строку, оставляя в ней только указанные HTML теги, их атрибуты и значения атрибутов
			вместе с разрешонным тегом нужно передавать и разрешонные атребуты этих тегов
		wp_kses_post()
		wp_kses_data() 
	любые URL в т.ч. сгенерированные WP нужно оборачивать в esc_url()
	любые строки JS скриптов нужно оборачивать в esc_js()
Подготовка темы к переводу на разные языки				https://wp-kama.ru/handbook/codex/translations		https://youtu.be/0-MzzIOzw7s
	т.е. переводится будет не контент сайта а сама тема
	строки которые должны будут переводится обернуть:
			__('','');		// без вывода на экран 
			__e('','');		// с выводом на экран 
		если добавить esc_html строки будут очищатся
			esc_html__('','')
			esc_html__e('','');
	указать WP место хранения папки с языковыми файлами
		в function.php 
			в хуке init() добовить load_theme_textdomain()
	обновить языкавой файл

Создание типов записей				https://wp-kama.ru/function/register_post_type
	!!! Важно: после создания нового типа записи. Обязательно нужно зайти на страницу 
		Настройки → Постоянные ссылки
			Нужно это для того, чтобы правила ЧПУ были пересозданы 
			и туда были добавлены правила нового типа записи.
	в function.php
		register_post_type()
	тип записи должен создаваться в момент хука-события init
	в качестве названия для нового типа записи нужно указывать уникальное имя, 
		отличное от уже имеющихся таксономий, 
		типов записей и зарезервированных WordPress публичных и частных переменных.
















----------------------- Практика end -----------------------



----------------------- Проблемы -- решения start ---------

----------------------- Проблемы -- решения end -----------








----------------------- ЧЕРНОВИК -----------------------









---------------------------		до 2022 года		-------------------------------------------------------
САМЫЙ ПЕРВЫЙ PHP ФАЙЛ, ОБЫЧНО ЭТО INDEX.PHP - ЭТО ГЛОБАЛЬНАЯ ОБЛАСТЬ КОДА





--------------------------------------			до 2022 года		----------------------------------

Алгоритм изучения вордпресс
	Бзовые знания
		PHP 
		локальный сервер
		SQL 
			создание таблиц
			создание пользователя
			распределение прав пользователей
	Установка и настройка вордпресс
	Админ панель
		главная консоль
		страницы и записи
		медиафайлы и загрузки
		коментарии
		внешний вид
			темы
			виджеты 
			меню
		плагины
		пользователи
		настройки
Создание темм 
	самостоятельно с нуля
		установка и настройка готовых тем
			дочерние темы
		создание своей темы
			руками
				АРХЕТИКТУРА  ТЕМЫ
					самостоятельно с нуля
						style.css
						screenhoc.png
						index.php
						fanction.php
					генератор болванок
						underscores.me
				- ИЕРАРХИЯ ШАБЛОНОВ		незакончено!
					
					!!!!!	ФУНДОМЕНТАЛЬНАЯ ОСНОВА ВСЕГО ШАБЛОНА
						движок обрабатывает все файлы в строгом соответствии с иерархией
							пример:
								цыкл ворд пресс предназначен для перебора массива записей
								массив записей формируеться:
									движком, автоматически(!!), 
									перебираеться при помощи 
										if ( have_posts() ) : while ( have_posts() ) : the_post(); 
									на страницах которые формируються файлами:
										index.php, single.php, category.php и д.р. а так же тех что могут 
										использоваться в место них в соответствии с иерархией
										ДРУГИМИ СЛОВАМИ:
											для страниц с стандартными названиями, по умолчинию, массив постов заполнен!!! 
									а на всех остальных массив записей атоматически формироваться не будет!!
									и массив очередного поста нужно вносить в глобальную переменную $post 
									иначе не будут работать теги шаблона

					определяет какой из файло будет формировать ту или иную страницу 
					устанавливает правила именования файлов шаблона
					т.е. 'Иерархия шаблонов' это порядок подключения файлов шаблонов страниц
					
					Под "Иерархией" в данном случае понимаеться последовательная проверка:
						есть список файлов, зарегистрированных шаблонов
						проводиться последовательная проверка на их физ существование
						при нахождении файла проверка прекращаеться 
						найденный файл используеться в качестве шаблона

					Иерархию файлов можно изменить через динамические фильтры:
						(type)_template_hierarchy
						(type)_template
						и др.
					не участвуют в еирархии:
						sidebar.php
						header.php 
						и т.п.
					functions.php - всегда подключается автоматически при загрузке темы
				+ ЦЫКЛ ВОРДПРЕСС - The Loop		https://wp-kama.ru/id_119/the-loop.html
					задача этого цыкла ---- перебор записей 

					цель перебора -- вывод информации из записи на текущую страницу сайта
						при этом:
							внешний вид определяеться вёрсткой страницы
							для получения той или иной информации из записи сущствуют специальные функции. Эти ф-ции используються только в цыкле по этому вызываются без параметров. т.е. они обрабатывают только текущую запись.
					способ перебора:
						одной из специальных ф-ций формируеться массив, выборка, записей из таблицы "posts" базы данных. У каждой ф-ции есть массив параметров указание которых позволяет очень гибко настраивать выборку записей.
						перебором этого массива и занимается цыкл вордпресса

					Не каждый перебор массива записей будет "Цыклом Вордпресс"!!!
					т.е. ф-ции цыкла будут работать не всегда!
					для того что бы цыкл стал "The Loop" иногда нужна ф-ция setup_postdata().

					вся информация о текущем посте храниться в переменной $post

					Способы создания цыкла:
						have_posts() -- стандартный цыкл
							используется для формирования базовых страниц WP (категории, метки, архивы по дате)
							отдельный запрос на выборку из БД не нужен 
							т.к. вордпресс автоматически добавляет данные в переменную $wp_query в соответствии с тем, на какой странице мы сейчас находимся. т.е. на главной странице или странице рубрик, данные будут разные.
						get_posts() -- произвольный (дополнительный) цыкл
						 	Самый удобный и безопастный способ организовать цыкл
						 	Получает записи (посты, страницы, вложения) из базы данных по указанным критериям. Можно выбрать любые посты и отсортировать их как угодно.

						 	НЕОБХОДИМО:
						 		в начале цыкла:
						 			вызвать setup_postdata(). Она заполняет глобальные переменные, которые нужны для корректной работы некоторых Тегов Шаблона, которые используются внутри Цикла WordPress.
						 		после цыкла:
						 			wp_reset_query(); // сброс запроса т.к. нужно чтобы $post всегда содержала данные текущего поста страницы
						 			эта ф-ция возвращает глобальную переменную $post в правильное состояние: в соответствие с текущим.
						wp_query() -- произвольный (дополнительный) цыкл
							Используеться для 
								вывода записей никак не связанных со страницей
								создания множественных (дополнительных) циклов
								получения данных из записей и о записях для реализации разнообразного ф-ционала, проверок и т.п.
							Преимущество
								создаёться НОВЫЙ ОБЪЕКТ $query,
								который никак не связан с аналогичным глобальным объектом $wp_query
								поэтому мы никак не нарушаем структуру текущей страницы и 
								не влияем на роботу других ф-ций

						query_posts()-- произвольный (дополнительный) цыкл
							Использовать query_posts() опасно!!!
							т.к. эта ф-ция используется самим WP и вмешательство в её работу черевато непредсказуемыми багами т.к. на работе этой ф-ции базирують очень много других ф-ций
							Но все пораметры этой ф-ции могут быть использованы get_posts() и wp_query()

							Используеться ТОЛЬКО тогда когда нужно немного изменить ОСНОВНОЙ (базовый) запрос WordPress.
							Хотя для таких задач все же лучше использовать фильтр pre_get_posts. 
			перенос вёрстки в файлы темы
			подключение стилей и скриптов
			хуки
				add_action
				wp_enqueue_style	
				wp_enqueue_script	
			вывод шапки и футера
			get_header
				header.php
				header-post.php
				header-blog.php
			get_footer
				footer.php
				footer-blog.php
				footer-home.php
			регистрация и вывод меню
			register_nav_menu
			wp_nav_menu
			создание ф-ционала темы
				function.php
				add_theme_support
			вывод постов в шаблоны записей
			шаблоны страниц
			настройка садбаров с виджетами
			создание типов записей
			регистрация и использование таксономий
			создание и использование миниатюр изодражений
			фреймворки для создания тем		
			плагины
				создание
				сторонних разработчиков
				формы обратной связи
				метрика и аналитика
				гео карты и навигация
				работа с кешем
				SEO
				слайдеры и карусели
				модальные окна
				произвольные поля
	автоматически

Способы заработка на вордпресс
	разработка и продажа сайтов
		поиск заказов
		продажа на биржах		
	разработка и продажа шаблонов
		поиск заказов
		продажа на биржах
	создание своих сайтов
		продвижение
		монитизация



