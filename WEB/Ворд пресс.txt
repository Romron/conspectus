
Источники:
	+++https://www.youtube.com/c/%D0%91%D1%8B%D1%82%D1%8C%D0%9F%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%81%D1%82%D0%BE%D0%BC/playlists
	Генератор файловой структуры	https://underscores.me/

Термины:
	спецификация
		часть имени файла от тире до точки
		уточняет логическое значение файла
	id имя файла или часть имени файла если в имени файла есть спецификация
	префикс
		часть имени функции от начала до тире	нужен для того чтобы избежать задваивания названий в разных темах плагинах и т.п.


Смежные области:



----------------------- ТЕОРИЯ start -----------------------
Алгоритм посадки шаблона
	структурирование исходного HTML
		в my_site\wp-content\themes
			создать папку для своей темы
			в папку паместить каркас темы
		в my_site\wp-content\themes\my_them\assets
			исходная вёрстка
		в my_site\wp-content\themes\my_them\plugins
			создать папку для плагина my_them_name-core
			в папку паместить каркас плагина
			после готовности плагин заархивировать т.к. 
				в WP плагины подключаются только в виде ZIP архива 
		разнести файлы исходной вёрстки по соответствующим папкам каркаса теммы
		подключить к темме:
			стили
			шрифты
			скрипты
			и д.р.
		вынести в отдельные файлы
			стандартные элементы страницы в корень теммы
				хедер
				футер
			повторяющиеся элементы страниц в попку parts в корень теммы
	разработка необходимого дизайна
		в functions.php 
			всегда в стандарте
				show_admin_bar(false);	// убирает заголовок WP на страницах сайта
				add_theme_support('automatic-feed-links');		// добавляет ссылки на RSS фиды постов и комментариев в head часть HTML документа.
				add_theme_support('tiyle-tag');		// позволит плагинам и темам изменять метатег <title>.
			подключение необходимых плагинов сторонних разработчиков
				см. обязательные плагины
			картинки
				зарегестрировать необходимые размеры
			создать навигации
			создать пагации
	разработка необходимого функционала
		в плагин my_them_name-core
			весь самописный функционал
				создание 
					типов записей
					кастомных полей
					таксономий
					и д.р.
		подключение необходимых плагинов сторонних разработчиков
			см. обязательные плагины
	автоматизация полученной стуктуры
		глобольные настройки теммы
			создать theme options panel 
			настроить options panel
			создать поля в options panel в соответствии с шаблоном
			в нужных местах страниц получить данные из полей options panel				https://youtu.be/44tFg9-UW9k		35:34 !!
		для получения любых данных необходимо использовать теги шаблона			https://wp-kama.ru/functions/template-tags
			это функции, которые задумывались специально для использования в теме (шаблоне)
			пример:	
				данные из стандартных полей админки WP 
					echo esc_html(bloginfo('name_fild'));		// для поля "Название сайта" name_fild = 'name'
		
	повторяющийся код в стандартных файлах каркаса переместить в самый приоритетный, сагласно иерархии, файл		https://youtu.be/nMztB1tSCIA		24:27
	не используемые файлы страниц каркаса удалить 
	тест теммы плагином theme check			



подключение файлов в functions.php
	require get_template_directory() . '/inc/metabox.php';
страницы и посты а также любые другие типы записей 
	это всего лиш записи в таблице posts базы данных
	тело поста формировать в отдельном файле с префиксом single-.....php
цикл WP --> глобальный запрос
	по умолчанию формирует глобальный запрос в базу данных 
		инфармацию выдаёт каждому типу страниц разную на основании зароса от get_header();
			для главной страницы это все посты
			для single.php один пост
	т.е. перед цыклом должена быть get_header(); 
	если в настройках "Чтение" указать главной страницей "Ваши последние записи"
		при выводе постов на странице index.php
			тело поста формировать частями которые будут находится в отдельных файлах
				content.php
					в котором:
						<article <?php post_closs();?> id="post-<?php the_id();?>" data-post-id="<?php the_id();?>" >
							вёрстка с использованием:
								the_title();
								the_content();
								the_permalink();
								get_post_meta();
								и т.д.
						</article>
			в самом index.php
				<?php get_template_part('путь к файлу / имя файла без разширения', 'спецификация имени файла') ?>
	если в настройках "Чтение" указать главной страницей "Статическая страница"
		главный цыкл WP будет вывыдить только один пост
		для того что бы получить все посты нужно использовать класс WP_Query{}
		который выводит любую инфу в любом месте сайта
произвольные поля в админке WordPress				https://youtu.be/CBDpmQQ7Znc
	создать блок полей в админ панеле
		functions.php	
			function ITDS_add_metabox(){
					add_meta_box('goods_metabox', esc_html__('Goods settings', 'ITDS'),'goods_metabox_html', 'goods','normal');
				}
				add_action('add_meta_boxes', 'ITDS_add_metabox');
				где 
					goods_metabox_html -- вёрстка самих полей
	создать сами поля -- вёрстка
		functions.php
			function goods_metabox_html($post){
				// если значение поля уже есть в БД 
				$rating = get_post_meta($post->ID,'rating',true);				
				$old_price = get_post_meta($post->ID,'old_price',true);
				$new_price = get_post_meta($post->ID,'new_price',true);
				$status = get_post_meta($post->ID,'status',true);
				?>
					<p>
						<label for="rating"> <?php esc_html_e('Рейтинг','ITDS_Agency_test')?> </label>
							<input type="text" id="rating" name="rating" value="<?php echo esc_attr($rating);?>"/>
						<label for="status"> <?php esc_html_e('Статус','ITDS_Agency_test')?> </label>	
							<input type="text" id="status" name="status" value="<?php echo esc_attr($status);?>"/>
						<label for="old-price"> <?php esc_html_e('Старая цена','ITDS_Agency_test');?> </label>	
							<input type="text" id="old-price" name="old-price" value="<?php echo esc_attr($old_price);?>"/>
						<label for="new-pric"> <?php esc_html_e('Новая цена','ITDS_Agency_test')?> </label>
							<input type="text" id="new-price" name="new-price" value="<?php echo esc_attr($new_price);?>"/>
					</p>
				<?php
			}

	проверки данных из полей и защиты 
		// чтобы убедиться, что данные были отправлены с текущего сайта, а не от куда-то еще
		if (!isset($_POST['_goods_metabox']) || !wp_verify_nonce($_POST['_goods_metabox'], 'ITDS_goods_metabox_html54545461213878')) {
			return $post_id;
		}

		// проверка на автосохранение самим WP
		if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
			return $post_id;
		}
		// проверка на post_type
		if ($post->post_type != 'goods') {
			return $post_id;
		}

		// проверка прав пользователя
		$post_type = get_post_type_object($post->post_type);
		if (!current_user_can($post_type->cap->edit_post,$post_id)) {
			return $post_id;
		}

	сохранить значения полей в БД
		functions.php
			function ITDS_goods_save_meta_box($post_id, $post){
				
				// проверки !!!

				if (isset($_POST['rating'])) {
					update_post_meta($post_id,'rating', sanitize_text_field($_POST['rating']));
					}else{
						delete_post_meta($post_id, 'rating',);
					}	
					return $post_id;		
				}
				add_action('save_post', 'ITDS_goods_save_meta_box', 10, 2);	// где 2 это количество передаваемых аргументов
	получение инфы на страницы сайта	
		get_post_meta() можно использовать за пределами Цикла WordPress, т.е. где угодно в шаблоне
картинки				https://youtu.be/vS0UW853Dg4
	WP автоматически нарезает загруженные картинки на устанавленные, зарегестрерованные, размеры
	регестрация своих размеров
		!! действует только на картинки которые будут загружаться после регистрации новыз размеров
			function.php
				обязательно   add_theme_support( 'post-thumbnails' );
				add_image_size('goods-cover', 405, 300, crop);
					где crop -- метод маштабирования
						может задаваться масивом
	переопределение существующих размеров
		!! действует только на картинки которые будут загружаться после регистрации новыз размеров
			изменить размеры в БД
				update_option('название_стандартного_размера_size_w', новая ширина)
				update_option('название_стандартного_размера_size_h', новая высота)
				update_option('название_стандартного_crop', 1)
	перенарезать картинки загруженные до регестрации новых размеров
		плагин	"regenerate thumbnails"
	вывести на экран
		has_post_thumbnail()		// Проверяет имеет ли указанная запись (пост) картинку миниатюру. Условный тег
		the_post_thumbnail() 	// Выводит html код картинки-миниатюры текущего поста.
		get_post_thumbnail_id()	// Получает ID миниатюры указанной записи (поста)
		get_the_post_thumbnail(get_the_ID(),paзмер)	// Получает миниатюру поста, которая установлена на странице редактирования записи и формирует html код картинки <img> на основе полученной ссылки на миниатюру.
			где paзмер
				название зарегистрированного размера либо 
				масив с шириной и высотой
					arrey(100,100)
		set_post_thumbnail()		// Устанавливает миниатюру записи по переданным ID записи и ID вложения (медиафайла)
		пример
			if (has_post_thumbnail(get_the_ID())){
				the_post_thumbnail('название_размера_кртинки');
			}
форма поиска
	в любом месте темы
		get_search	_form();
			вернёт стандартную форму поиска WP
	для стилизации формы поиска 
		в корне темы нужен файл  	searchform.php
		или фильтер в function
			function my_theme_custom_searchform($form){
				$form = "
					<form >
						html для формы поиска;
						при этом важно!!!
							указать тегу form метод 
							и если он GET то полю ввода поискового запроса задать имя 'S'


					</form>
				";
				return $searc_form;
			};
			add_filter('get_search	_form',my_theme_custom_searchform);
	сраницы вывода результатов поиска
		search.php
	для формы поиска как и для других блоков нужно зарегистрировать поддержку html5
		в function
			......
			function my_theme_init(){
				регистрация меню

				add_them_suport(
					'html5',
					array(
						search-form,
						и прочие стандартные блоки
					)
				);
			}
			add_action('after_setup_theme',my_theme_init,0);
			......
меню и навигация				https://youtu.be/Y8EA79iGt-A
	создать локацию в админ панели
		в function
			function ITDS_Agency_menus()
			{
				register_nav_menus(array(
					'heder_nav_menu-1' => esc_html__('Меню хедера 1'),
					'heder_nav_menu-2' => esc_html__('Меню хедера 2')
				));
			}
			add_action('after_setup_theme', 'ITDS_Agency_menus', 0);
		в админ панели
			внешний вид -> меню (появится только после регистрации хотя бы одного меню)
				создать меню
	вывести меню на странице сайта
		в нужном месте любой страницы
			wp_nav_menu(arrey(
				'theme_location'=>'heder_nav_menu-1',		// именно по названию локации WP распознаёт меню
			));
	свой хук для назначения класса тегам например li			https://youtu.be/5W9hL3N7Q6g	33:46
пагинация				https://youtu.be/gLdt8Pqf4T4		https://www.kobzarev.com/wordpress/pagination-doesnt-work/
	формируется по данным из запроса WP_Query
		WP_Query -- стандартный тогда 
			пагинация разделяется по типам записей 
			т.е. на каждом типе страниц будет разный
		WP_Query -- кастомный тогда
			$paged = (get_query_var('paged')) ? get_query_var('paged') : 1;	// если paged есть верни её иначе 1. 
				// Нужно для того что бы WP_Query() выводил данные в соответствии с той страницей на которой сейчас находишся
			$args = array(
							'post_type' => 'goods',
							'posts_per_page' => 4,
							'paged' => $paged,
						);
			$goods = new WP_Query($args);			
						
	ф-ции для отображения пагинации
		paginate_links();		//	возвращает значение. Позволяет создать ссылки пагинации для любых страниц. Используется чаще всего.
			пример того как выглядит планация: « предыдущая 1 … 3 4 5 6 7 … 9 следующая »
			для того что бы paginate_links() работала с кастомным WP_Query():
				$args = array(
								'post_type' => 'goods',
								'posts_per_page' => 4,
								'paged' => $paged,	// обязательно
							);
				$goods = new WP_Query($args);					
				echo paginate_links(			// обязательны только эти два параметра!!
					array(
						'current' => max( 1, get_query_var('paged') ),		// Нужно для того что бы WP_Query() выводил данные в соответствии с той страницей на которой сейчас находишся
						'total'   => $goods->max_num_pages,
					);					
				);
			для удобства использования 
				в function:
					function my_theme_pagination($query){
						$current = absint(
							max(
								1,
								get_query_var('paged') ? get_query_var('paged') : get_query_var('page')
							)
						);
						echo wp_kses_post(
							paginate_links(
								array(
									'total'   => $query->max_num_pages,
									'current' => $current,
									'prev_text' => '<div class="arow-block__arow-left fon-white"><img src="img/arow-block__arow-left-green.png" alt=""></div>',
									'next_text' => '<div class="arow-block__arow-right fon-white"><img src="img/arow-block__arow-right-green.png" alt=""></div>',
								)
							)
						);
					}
				в любом месте сайта:
					для статических страниц 'paged' заменить на 'page'
						get_query_var('paged') ? get_query_var('paged') : get_query_var('page')
					$paged = (get_query_var('paged')) ? get_query_var('paged') : 1;	// если paged есть верни её иначе 1. 
						// Нужно для того что бы WP_Query() выводил данные в соответствии с той страницей на которой сейчас находишся				
					$args = array(
									'post_type' => 'goods',
									'posts_per_page' => 4,
									'paged' => $paged,
								);
					$goods = new WP_Query($args);	
					my_theme_pagination($goods);
				

		the_posts_navigation(); // Выводит блок пагинации Используется на страницах архивов
		the_post_navigation(); // Выводит блок пагинации Используется на single
		get_posts_nav_link();	// Получает ссылки на предыдущую и следующую страницы записей на странице архива
		get_the_posts_navigation();	// Получает ссылки на следующую и предыдущую страницы постов. Используется на страницах архивов
		posts_nav_link();	// самая простая навигация без указания кол-ва стр. Выводит ссылки на предыдущую и следующую страницы (посты/категории)
		previous_posts_link();	// Выводит ссылку на предидущую страницу пагинации
		get_previous_posts_link();	// возвращает ссылку на предидущую страницу пагинации
		next_posts_link();	// Выводит ссылку на следующую страницу пагинации
		get_next_posts_link();	// возвращает ссылку на следующую страницу пагинации
		и д.р.
создать плагин
	в папке plugins теммы 
		my-plugin-name --	папка плагина в каторой:
			обязательные файлы	
			 	index.php
				my-plugin-name.php
					<?php
						/*
						Plugin Name: my-plugin-name
						Plugin URI: #
						Description: Функционал необходимый для работы теммы
						Version: 1.0
						Author: Roman
						Author URI: #
						License: GPLv2 or later
						Text Domain: my_plugin_name
						*/
	подключение файлов 
		т.к. get_template_directory_uri() в плагине не работает
		путь к плогину формировать так:
			require plugin_dir_path(__FILE__) . /* путь к нужному файлу */
подключение плагинов к теме			https://youtu.be/bcpkS1b31AQ
	всё что касается функционала должно находится в плагине
		имя которого /plugins/my_plugin-core.zip
	сгенерировать и скачать библиотеку		http://tgmpluginactivation.com/download/
	из полученного архива перенести 
		class-tgm-plugin-activation в корень_темы/inc
		папку languages в корень темы
	в function	
		подключить class-tgm-plugin-activation
			в example.php есть соответствующая строка
	из файла example.php
		скопировать в function
			хук подключения регистрации настроек
				add_action('tgmpa_register', 'ITDS_Agency_test_register_required_plugins');
			тело функции
				function my_theme_register_required_plugins()
				{
					.....
				}
	после переноса в function
		в my_theme_register_required_plugins() оставить только нужное
			подключение my_plugin-core.zip из локальной папки теммы 
			все остальные из репозтория WP 
						// This is an example of the use of 'is_callable' functionality. A user could - for instance -
						// have WPSEO installed *or* WPSEO Premium. The slug would in that last case be different, i.e.
						// 'wordpress-seo-premium'.
						// By setting 'is_callable' to either a function from that plugin or a class method
						// `array( 'class', 'method' )` similar to how you hook in to actions and filters, TGMPA can still
						// recognize the plugin as being installed.
						array(
							'name'        => 'WordPress SEO by Yoast',	// название плагина
							'slug'        => 'wordpress-seo',		// последняя часть ссылки на страницу плагина в https://wordpress.org/
							'required'    => true,	// If false, the plugin is only 'recommended' instead of required.
						),
глобольные настройки теммы			https://youtu.be/44tFg9-UW9k
	создать theme options panel 
		самому
		плагин redux -- восновном используется для динамических страниц
			установить плагин redux
			создать файл с настройками /inc/redux-options.php
			для этого
				найти файл примера
					wp-content/plugins/redux-Framework/sample/sample-config.php
				скопировать из него весь код в свой файл redux-options.php
				в functions.php подключить redux-options.php 
					require_once get_template_directory() . '/inc/redux-options.php';
	настройка options panel
		созданой самастоятельно
		созданой плагином redux
			в /inc/redux-options.php
				$opt_name = 'my_theme_name_options';	// по этому имени будем получать данные в front часть сайта
																	// т.е. вся options panel хранится в одном массиве а это его имя
				прописать нужные поля в $args				https://youtu.be/44tFg9-UW9k		8:35
	создание полея в options panel	
		деление полей на категории т.е. создание секций полей			https://youtu.be/44tFg9-UW9k		19:32
	получение данных из полей  options panel
		в нужном месте страницы
			<?php 
				global $my_theme_name_options;		// значение заданное в $opt_name
				echo $my_theme_name_options['fild_name'];  // в указонном поле может быть строка (echo ...) или масив (print_r();)
			?>
		


	

----------------------- ТЕОРИЯ end ------------------------- 

----------------------- Практика start ---------------------
Обязательно при посадке шаблона
	стили и разметка в теме
	функционал в плагине

	закоментированого када не должно быть
	картинки должны загружаться через админку
	пагинация
	подключить 				https://youtu.be/5W9hL3N7Q6g		4:22
		шрифты
		скрипты
		должны быть скачаны на сайт
	вынести в отдельный файл
		хэдер
		футер
		повторяющиеся части шаблана вывести в отдельные файлы
	автоматизация вывада данных на страницы сайта из админ панели			https://youtu.be/5W9hL3N7Q6g		9:10
		API настроек (опций)			https://wp-kama.ru/id_3773/api-optsiy-nastroek.html
		настроек много 
			Redux Framework	https://youtu.be/44tFg9-UW9k
Плагины обязательные для каждого сойта				https://youtu.be/aETsjfn2InU
	iThemes Security 		

Хранить на Github		https://qna.habr.com/q/461903
	???  https://github.com/roots/bedrock
	???  https://d2c.io/ru/article/how-to/ispolzovanie-git-pri-rabote-s-wordpress-i-perenos-proekta-v-d2c
	репозиторий гита в корне вордпресса
		.gitignore
			# VS Cod
			.vscode

			# WordPress
			*.log
			/wp-*.php
			/index.php
			/xmlrpc.php
			/license.txt
			/readme.html
			/sitemap.xml
			/sitemap.xml.gz

			/backup*

			wp-admin/
			wp-includes/

			wp-content/*
			!wp-content/themes/
			wp-content/themes/*

			!wp-content/plugins/
			wp-content/plugins/*

			!wp-content/themes/ei/
			!wp-content/themes/ei-child/

			!wp-content/plugins/realty-export

			# Frontend tools
			wp-content/themes/ei-child/node_modules/
	сomposer в WordPress 		https://oddstyle.ru/wordpress-2/stati-wordpress/ispolzovanie-composer-v-wordpress-nebolshoe-rukovodstvo-dlya-novichkov.html
	управление WordPress-сайтом с помощью Git 		https://wordpressify.ru/2019/09/upravlenie-wordpress-sajtom-s-pomoshhyu-git-i-composer-chast-1-sohranyaem-wordpress-v-git/
WordPress -- Git -- Composer
	поместить WordPress в отдельную папку	https://codex.wordpress.org/%D0%A0%D0%B0%D0%B7%D0%BC%D0%B5%D1%89%D0%B0%D0%B5%D0%BC_WordPress_%D0%B2_%D0%BE%D1%82%D0%B4%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE%D0%BC_%D0%BA%D0%B0%D1%82%D0%B0%D0%BB%D0%BE%D0%B3%D0%B5
	структура проэкта		
		https://github.com/markjaquith/WordPress-Skeleton
		+- https://github.com/chrisguitarguy/wordpress-skeleton
Правила именования функций
	начинается с префикса -- имени темы
	нижнее подчёркивание 
	имя ф-циии
Отслеживание ошибок
	файл wp-config
		define(WP_DEBUG,true);
всегда добавлять в шаблон технические ф-ции:
	в файл header.php(!!!)
		wp_header() 
	на всех страницах 
		<body <?php body_class(); ?>
		<?php wp_doby_open(); ?>
	в файл footer.php(!!!)
		<?php wp_footer(); ?>		// для того чтобы скрипты подключались в футере
Подключение HTML блоков на страницу
	HTML блоков хранятся в отдельных файлах
	подключить в любое место страницы
		get_template_part()				https://youtu.be/2US8KrM1hio
			Ищет и подключает указанный файл темы. 
			Похожа на PHP функцию include(), только не нужно указывать путь до темы.
			если вторым параметром передать какую то динамическую функцию 
			например get_post_type будет подгружать разные блоки в зависимости от типа поста
Подключение стилей реализовано по средствам куков 			!!! https://youtu.be/8n_M5yd60m4
	wp_enqueue_style();
	для того что бы wordpress различал стили разных тем
	в первый параметр можно добавить к имени файла стилей имя функции в качествепрефикса
		function 	my_func_enqueue_style{
			wp_enqueue_style(my_func_stule, ..... );
		} 
Подключение хедера
	в файле header.php(!!!) добавить ф-цию wp_head();
Хуки
	спосаб выполнять свои ф-ции в момент срабатывания определённого события
	свои хуки		https://youtu.be/5W9hL3N7Q6g	33:46
	обязательно устанавливать приоритет подключения
		можно разный нав среднем 100
Фильтра		https://youtu.be/8n_M5yd60m4  ~ 14 минута
Меню 		https://youtu.be/Y8EA79iGt-A
правильное(!) подключение шрифтов			https://youtu.be/nMztB1tSCIA
Безопасный вывод данных (Escaping)				https://youtu.be/HElKv_K2_48
	т.к. данные выводимые из БД магут содержать любые(!) символы
		пример
			" ' < > & и т.д.
	!!!	вообще в теме не должно быть конструкции echo $....	!!!
		т.е. глобальный поиск по файлам темы "echo $" не должен вничего находить
	любые строки выводимые в АТРИБУТ ТЕГА нужно оборачивать в esc_attr();
		echo esc_attr( $text );
	любые строки выводимые НА ЭКРАН нужно оборачивать в esc_html()
	если часть тегов в строке всё таки нужно выводить 
		wp_kses()  
			чистит строку, оставляя в ней только указанные HTML теги, их атрибуты и значения атрибутов
			вместе с разрешонным тегом нужно передавать и разрешонные атребуты этих тегов
		wp_kses_post()
		wp_kses_data() 
	любые URL в т.ч. сгенерированные WP нужно оборачивать в esc_url()
	любые строки JS скриптов нужно оборачивать в esc_js()
Подготовка темы к переводу на разные языки				https://wp-kama.ru/handbook/codex/translations		https://youtu.be/0-MzzIOzw7s
	т.е. переводится будет не контент сайта а сама тема
	строки которые должны будут переводится обернуть:
			__('','');		// без вывода на экран 
			__e('','');		// с выводом на экран 
		если добавить esc_html строки будут очищатся
			esc_html__('','')
			esc_html__e('','');
	указать WP место хранения папки с языковыми файлами
		в function.php 
			в хуке init() добовить load_theme_textdomain()
	обновить языкавой файл
Создание типов записей				https://wp-kama.ru/function/register_post_type
	!!! Важно: после создания нового типа записи. Обязательно нужно зайти на страницу 
		Настройки → Постоянные ссылки
			Нужно это для того, чтобы правила ЧПУ были пересозданы 
			и туда были добавлены правила нового типа записи.
	в function.php
		register_post_type()
	тип записи должен создаваться в момент хука-события init
	в качестве названия для нового типа записи нужно указывать уникальное имя, 
		отличное от уже имеющихся таксономий, 
		типов записей и зарезервированных WordPress публичных и частных переменных.
Виджеты для Elementor		https://youtu.be/D-JMm37C7jU















----------------------- Практика end -----------------------



----------------------- Проблемы -- решения start ---------

----------------------- Проблемы -- решения end -----------








----------------------- ЧЕРНОВИК -----------------------









---------------------------		до 2022 года		-------------------------------------------------------
САМЫЙ ПЕРВЫЙ PHP ФАЙЛ, ОБЫЧНО ЭТО INDEX.PHP - ЭТО ГЛОБАЛЬНАЯ ОБЛАСТЬ КОДА





--------------------------------------			до 2022 года		----------------------------------

Алгоритм изучения вордпресс
	Бзовые знания
		PHP 
		локальный сервер
		SQL 
			создание таблиц
			создание пользователя
			распределение прав пользователей
	Установка и настройка вордпресс
	Админ панель
		главная консоль
		страницы и записи
		медиафайлы и загрузки
		коментарии
		внешний вид
			темы
			виджеты 
			меню
		плагины
		пользователи
		настройки
Создание темм 
	самостоятельно с нуля
		установка и настройка готовых тем
			дочерние темы
		создание своей темы
			руками
				АРХЕТИКТУРА  ТЕМЫ
					самостоятельно с нуля
						style.css
						screenhoc.png
						index.php
						fanction.php
					генератор болванок
						underscores.me
				- ИЕРАРХИЯ ШАБЛОНОВ		незакончено!
					
					!!!!!	ФУНДОМЕНТАЛЬНАЯ ОСНОВА ВСЕГО ШАБЛОНА
						движок обрабатывает все файлы в строгом соответствии с иерархией
							пример:
								цыкл ворд пресс предназначен для перебора массива записей
								массив записей формируеться:
									движком, автоматически(!!), 
									перебираеться при помощи 
										if ( have_posts() ) : while ( have_posts() ) : the_post(); 
									на страницах которые формируються файлами:
										index.php, single.php, category.php и д.р. а так же тех что могут 
										использоваться в место них в соответствии с иерархией
										ДРУГИМИ СЛОВАМИ:
											для страниц с стандартными названиями, по умолчинию, массив постов заполнен!!! 
									а на всех остальных массив записей атоматически формироваться не будет!!
									и массив очередного поста нужно вносить в глобальную переменную $post 
									иначе не будут работать теги шаблона

					определяет какой из файло будет формировать ту или иную страницу 
					устанавливает правила именования файлов шаблона
					т.е. 'Иерархия шаблонов' это порядок подключения файлов шаблонов страниц
					
					Под "Иерархией" в данном случае понимаеться последовательная проверка:
						есть список файлов, зарегистрированных шаблонов
						проводиться последовательная проверка на их физ существование
						при нахождении файла проверка прекращаеться 
						найденный файл используеться в качестве шаблона

					Иерархию файлов можно изменить через динамические фильтры:
						(type)_template_hierarchy
						(type)_template
						и др.
					не участвуют в еирархии:
						sidebar.php
						header.php 
						и т.п.
					functions.php - всегда подключается автоматически при загрузке темы
				+ ЦЫКЛ ВОРДПРЕСС - The Loop		https://wp-kama.ru/id_119/the-loop.html
					задача этого цыкла ---- перебор записей 

					цель перебора -- вывод информации из записи на текущую страницу сайта
						при этом:
							внешний вид определяеться вёрсткой страницы
							для получения той или иной информации из записи сущствуют специальные функции. Эти ф-ции используються только в цыкле по этому вызываются без параметров. т.е. они обрабатывают только текущую запись.
					способ перебора:
						одной из специальных ф-ций формируеться массив, выборка, записей из таблицы "posts" базы данных. У каждой ф-ции есть массив параметров указание которых позволяет очень гибко настраивать выборку записей.
						перебором этого массива и занимается цыкл вордпресса

					Не каждый перебор массива записей будет "Цыклом Вордпресс"!!!
					т.е. ф-ции цыкла будут работать не всегда!
					для того что бы цыкл стал "The Loop" иногда нужна ф-ция setup_postdata().

					вся информация о текущем посте храниться в переменной $post

					Способы создания цыкла:
						have_posts() -- стандартный цыкл
							используется для формирования базовых страниц WP (категории, метки, архивы по дате)
							отдельный запрос на выборку из БД не нужен 
							т.к. вордпресс автоматически добавляет данные в переменную $wp_query в соответствии с тем, на какой странице мы сейчас находимся. т.е. на главной странице или странице рубрик, данные будут разные.
						get_posts() -- произвольный (дополнительный) цыкл
						 	Самый удобный и безопастный способ организовать цыкл
						 	Получает записи (посты, страницы, вложения) из базы данных по указанным критериям. Можно выбрать любые посты и отсортировать их как угодно.

						 	НЕОБХОДИМО:
						 		в начале цыкла:
						 			вызвать setup_postdata(). Она заполняет глобальные переменные, которые нужны для корректной работы некоторых Тегов Шаблона, которые используются внутри Цикла WordPress.
						 		после цыкла:
						 			wp_reset_query(); // сброс запроса т.к. нужно чтобы $post всегда содержала данные текущего поста страницы
						 			эта ф-ция возвращает глобальную переменную $post в правильное состояние: в соответствие с текущим.
						wp_query() -- произвольный (дополнительный) цыкл
							Используеться для 
								вывода записей никак не связанных со страницей
								создания множественных (дополнительных) циклов
								получения данных из записей и о записях для реализации разнообразного ф-ционала, проверок и т.п.
							Преимущество
								создаёться НОВЫЙ ОБЪЕКТ $query,
								который никак не связан с аналогичным глобальным объектом $wp_query
								поэтому мы никак не нарушаем структуру текущей страницы и 
								не влияем на роботу других ф-ций

						query_posts()-- произвольный (дополнительный) цыкл
							Использовать query_posts() опасно!!!
							т.к. эта ф-ция используется самим WP и вмешательство в её работу черевато непредсказуемыми багами т.к. на работе этой ф-ции базирують очень много других ф-ций
							Но все пораметры этой ф-ции могут быть использованы get_posts() и wp_query()

							Используеться ТОЛЬКО тогда когда нужно немного изменить ОСНОВНОЙ (базовый) запрос WordPress.
							Хотя для таких задач все же лучше использовать фильтр pre_get_posts. 
			перенос вёрстки в файлы темы
			подключение стилей и скриптов
			хуки
				add_action
				wp_enqueue_style	
				wp_enqueue_script	
			вывод шапки и футера
			get_header
				header.php
				header-post.php
				header-blog.php
			get_footer
				footer.php
				footer-blog.php
				footer-home.php
			регистрация и вывод меню
			register_nav_menu
			wp_nav_menu
			создание ф-ционала темы
				function.php
				add_theme_support
			вывод постов в шаблоны записей
			шаблоны страниц
			настройка садбаров с виджетами
			создание типов записей
			регистрация и использование таксономий
			создание и использование миниатюр изодражений
			фреймворки для создания тем		
			плагины
				создание
				сторонних разработчиков
				формы обратной связи
				метрика и аналитика
				гео карты и навигация
				работа с кешем
				SEO
				слайдеры и карусели
				модальные окна
				произвольные поля
	автоматически

Способы заработка на вордпресс
	разработка и продажа сайтов
		поиск заказов
		продажа на биржах		
	разработка и продажа шаблонов
		поиск заказов
		продажа на биржах
	создание своих сайтов
		продвижение
		монитизация



